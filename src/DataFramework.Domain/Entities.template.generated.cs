// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 8.0.5
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#nullable enable
namespace DataFramework.Domain
{
    public partial class DataObjectInfo
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        public string? AssemblyName
        {
            get;
        }

        public string? TypeName
        {
            get;
        }

        public string? Description
        {
            get;
        }

        public string? DisplayName
        {
            get;
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsVisible
        {
            get;
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsQueryable
        {
            get;
        }

        public bool IsReadOnly
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<DataFramework.Domain.FieldInfo> Fields
        {
            get;
        }

        public DataObjectInfo(string name, string? assemblyName, string? typeName, string? description, string? displayName, bool isVisible, bool isQueryable, bool isReadOnly, System.Collections.Generic.IEnumerable<DataFramework.Domain.FieldInfo> fields)
        {
            this.Name = name;
            this.AssemblyName = assemblyName;
            this.TypeName = typeName;
            this.Description = description;
            this.DisplayName = displayName;
            this.IsVisible = isVisible;
            this.IsQueryable = isQueryable;
            this.IsReadOnly = isReadOnly;
            this.Fields = fields is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<DataFramework.Domain.FieldInfo>(fields);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder ToBuilder()
        {
            return new DataFramework.Domain.Builders.DataObjectInfoBuilder(this);
        }
    }
    public partial class FieldInfo
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get;
        }

        public string? Description
        {
            get;
        }

        public string? DisplayName
        {
            get;
        }

        public string? TypeName
        {
            get;
        }

        public bool IsNullable
        {
            get;
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsVisible
        {
            get;
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsPersistable
        {
            get;
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool CanGet
        {
            get;
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool CanSet
        {
            get;
        }

        public bool IsReadOnly
        {
            get;
        }

        public bool IsIdentityField
        {
            get;
        }

        public bool IsComputed
        {
            get;
        }

        public bool IsRowVersion
        {
            get;
        }

        public bool UseForConcurrencyCheck
        {
            get;
        }

        public object? DefaultValue
        {
            get;
        }

        public System.Nullable<int> StringMaxLength
        {
            get;
        }

        public string? StringCollation
        {
            get;
        }

        public System.Nullable<bool> IsMaxLengthString
        {
            get;
        }

        public System.Nullable<byte> DatabaseNumericPrecision
        {
            get;
        }

        public System.Nullable<byte> DatabaseNumericScale
        {
            get;
        }

        public bool SkipFieldOnFind
        {
            get;
        }

        public string? DatabaseFieldName
        {
            get;
        }

        public string? DatabaseFieldType
        {
            get;
        }

        public string? DatabaseReaderMethodName
        {
            get;
        }

        public string? DatabaseCheckConstraintExpression
        {
            get;
        }

        public System.Nullable<bool> OverrideUseOnInsert
        {
            get;
        }

        public System.Nullable<bool> OverrideUseOnUpdate
        {
            get;
        }

        public System.Nullable<bool> OverrideUseOnDelete
        {
            get;
        }

        public System.Nullable<bool> OverrideUseOnSelect
        {
            get;
        }

        public System.Nullable<bool> IsRequiredInDatabase
        {
            get;
        }

        public bool IsIdentityFieldInDatabase
        {
            get;
        }

        public FieldInfo(string name, string? description, string? displayName, string? typeName, bool isNullable, bool isVisible, bool isPersistable, bool canGet, bool canSet, bool isReadOnly, bool isIdentityField, bool isComputed, bool isRowVersion, bool useForConcurrencyCheck, object? defaultValue, System.Nullable<int> stringMaxLength, string? stringCollation, System.Nullable<bool> isMaxLengthString, System.Nullable<byte> databaseNumericPrecision, System.Nullable<byte> databaseNumericScale, bool skipFieldOnFind, string? databaseFieldName, string? databaseFieldType, string? databaseReaderMethodName, string? databaseCheckConstraintExpression, System.Nullable<bool> overrideUseOnInsert, System.Nullable<bool> overrideUseOnUpdate, System.Nullable<bool> overrideUseOnDelete, System.Nullable<bool> overrideUseOnSelect, System.Nullable<bool> isRequiredInDatabase, bool isIdentityFieldInDatabase)
        {
            this.Name = name;
            this.Description = description;
            this.DisplayName = displayName;
            this.TypeName = typeName;
            this.IsNullable = isNullable;
            this.IsVisible = isVisible;
            this.IsPersistable = isPersistable;
            this.CanGet = canGet;
            this.CanSet = canSet;
            this.IsReadOnly = isReadOnly;
            this.IsIdentityField = isIdentityField;
            this.IsComputed = isComputed;
            this.IsRowVersion = isRowVersion;
            this.UseForConcurrencyCheck = useForConcurrencyCheck;
            this.DefaultValue = defaultValue;
            this.StringMaxLength = stringMaxLength;
            this.StringCollation = stringCollation;
            this.IsMaxLengthString = isMaxLengthString;
            this.DatabaseNumericPrecision = databaseNumericPrecision;
            this.DatabaseNumericScale = databaseNumericScale;
            this.SkipFieldOnFind = skipFieldOnFind;
            this.DatabaseFieldName = databaseFieldName;
            this.DatabaseFieldType = databaseFieldType;
            this.DatabaseReaderMethodName = databaseReaderMethodName;
            this.DatabaseCheckConstraintExpression = databaseCheckConstraintExpression;
            this.OverrideUseOnInsert = overrideUseOnInsert;
            this.OverrideUseOnUpdate = overrideUseOnUpdate;
            this.OverrideUseOnDelete = overrideUseOnDelete;
            this.OverrideUseOnSelect = overrideUseOnSelect;
            this.IsRequiredInDatabase = isRequiredInDatabase;
            this.IsIdentityFieldInDatabase = isIdentityFieldInDatabase;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder ToBuilder()
        {
            return new DataFramework.Domain.Builders.FieldInfoBuilder(this);
        }
    }
}
#nullable disable
