// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace DataFramework.Domain.Builders
{
    public partial class DataObjectInfoBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private string? _assemblyName;

        private string? _typeName;

        private string? _description;

        private string? _displayName;

        private bool _isVisible;

        private bool _isQueryable;

        private bool _isReadOnly;

        private System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.FieldInfoBuilder> _fields;

        private string _databaseTableName;

        private string _databaseSchemaName;

        private string _databaseFileGroupName;

        private string _customAddDatabaseCommandText;

        private string _customUpdateDatabaseCommandText;

        private string _customDeleteDatabaseCommandText;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder> _primaryKeyConstraints;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder> _foreignKeyConstraints;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexBuilder> _indexes;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder> _checkConstraints;

        private System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.EntityMappingBuilder> _customEntityMappings;

        private string? _defaultOrderByFields;

        private string? _defaultWhereClause;

        private System.Nullable<int> _overridePageSize;

        private System.Collections.ObjectModel.ObservableCollection<string> _additionalQueryFields;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _queryFieldNameStatements;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _queryExpressionStatements;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public string? AssemblyName
        {
            get
            {
                return _assemblyName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_assemblyName!, value!);
                _assemblyName = value;
                if (hasChanged) HandlePropertyChanged(nameof(AssemblyName));
            }
        }

        public string? TypeName
        {
            get
            {
                return _typeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_typeName!, value!);
                _typeName = value;
                if (hasChanged) HandlePropertyChanged(nameof(TypeName));
            }
        }

        public string? Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value;
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public string? DisplayName
        {
            get
            {
                return _displayName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_displayName!, value!);
                _displayName = value;
                if (hasChanged) HandlePropertyChanged(nameof(DisplayName));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsVisible
        {
            get
            {
                return _isVisible;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isVisible, value);
                _isVisible = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsVisible));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsQueryable
        {
            get
            {
                return _isQueryable;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isQueryable, value);
                _isQueryable = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsQueryable));
            }
        }

        public bool IsReadOnly
        {
            get
            {
                return _isReadOnly;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isReadOnly, value);
                _isReadOnly = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsReadOnly));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.FieldInfoBuilder> Fields
        {
            get
            {
                return _fields;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DataFramework.Domain.Builders.FieldInfoBuilder>>.Default.Equals(_fields!, value!);
                _fields = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Fields));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string DatabaseTableName
        {
            get
            {
                return _databaseTableName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_databaseTableName!, value!);
                _databaseTableName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(DatabaseTableName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string DatabaseSchemaName
        {
            get
            {
                return _databaseSchemaName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_databaseSchemaName!, value!);
                _databaseSchemaName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(DatabaseSchemaName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string DatabaseFileGroupName
        {
            get
            {
                return _databaseFileGroupName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_databaseFileGroupName!, value!);
                _databaseFileGroupName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(DatabaseFileGroupName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string CustomAddDatabaseCommandText
        {
            get
            {
                return _customAddDatabaseCommandText;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_customAddDatabaseCommandText!, value!);
                _customAddDatabaseCommandText = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CustomAddDatabaseCommandText));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string CustomUpdateDatabaseCommandText
        {
            get
            {
                return _customUpdateDatabaseCommandText;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_customUpdateDatabaseCommandText!, value!);
                _customUpdateDatabaseCommandText = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CustomUpdateDatabaseCommandText));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string CustomDeleteDatabaseCommandText
        {
            get
            {
                return _customDeleteDatabaseCommandText;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_customDeleteDatabaseCommandText!, value!);
                _customDeleteDatabaseCommandText = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CustomDeleteDatabaseCommandText));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder> PrimaryKeyConstraints
        {
            get
            {
                return _primaryKeyConstraints;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder>>.Default.Equals(_primaryKeyConstraints!, value!);
                _primaryKeyConstraints = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(PrimaryKeyConstraints));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder> ForeignKeyConstraints
        {
            get
            {
                return _foreignKeyConstraints;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder>>.Default.Equals(_foreignKeyConstraints!, value!);
                _foreignKeyConstraints = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ForeignKeyConstraints));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexBuilder> Indexes
        {
            get
            {
                return _indexes;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.IndexBuilder>>.Default.Equals(_indexes!, value!);
                _indexes = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Indexes));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder> CheckConstraints
        {
            get
            {
                return _checkConstraints;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder>>.Default.Equals(_checkConstraints!, value!);
                _checkConstraints = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CheckConstraints));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.EntityMappingBuilder> CustomEntityMappings
        {
            get
            {
                return _customEntityMappings;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<DataFramework.Domain.Builders.EntityMappingBuilder>>.Default.Equals(_customEntityMappings!, value!);
                _customEntityMappings = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CustomEntityMappings));
            }
        }

        public string? DefaultOrderByFields
        {
            get
            {
                return _defaultOrderByFields;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_defaultOrderByFields!, value!);
                _defaultOrderByFields = value;
                if (hasChanged) HandlePropertyChanged(nameof(DefaultOrderByFields));
            }
        }

        public string? DefaultWhereClause
        {
            get
            {
                return _defaultWhereClause;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_defaultWhereClause!, value!);
                _defaultWhereClause = value;
                if (hasChanged) HandlePropertyChanged(nameof(DefaultWhereClause));
            }
        }

        public System.Nullable<int> OverridePageSize
        {
            get
            {
                return _overridePageSize;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Int32>>.Default.Equals(_overridePageSize, value);
                _overridePageSize = value;
                if (hasChanged) HandlePropertyChanged(nameof(OverridePageSize));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Collections.ObjectModel.ObservableCollection<string> AdditionalQueryFields
        {
            get
            {
                return _additionalQueryFields;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.ObjectModel.ObservableCollection<System.String>>.Default.Equals(_additionalQueryFields!, value!);
                _additionalQueryFields = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(AdditionalQueryFields));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> QueryFieldNameStatements
        {
            get
            {
                return _queryFieldNameStatements;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>>.Default.Equals(_queryFieldNameStatements!, value!);
                _queryFieldNameStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(QueryFieldNameStatements));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> QueryExpressionStatements
        {
            get
            {
                return _queryExpressionStatements;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>>.Default.Equals(_queryExpressionStatements!, value!);
                _queryExpressionStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(QueryExpressionStatements));
            }
        }

        public DataObjectInfoBuilder(DataFramework.Domain.DataObjectInfo source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _fields = new System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.FieldInfoBuilder>();
            _primaryKeyConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder>();
            _foreignKeyConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder>();
            _indexes = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexBuilder>();
            _checkConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder>();
            _customEntityMappings = new System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.EntityMappingBuilder>();
            _additionalQueryFields = new System.Collections.ObjectModel.ObservableCollection<string>();
            _queryFieldNameStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _queryExpressionStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _name = source.Name;
            _assemblyName = source.AssemblyName;
            _typeName = source.TypeName;
            _description = source.Description;
            _displayName = source.DisplayName;
            _isVisible = source.IsVisible;
            _isQueryable = source.IsQueryable;
            _isReadOnly = source.IsReadOnly;
            if (source.Fields is not null) foreach (var item in source.Fields.Select(x => x.ToBuilder())) _fields.Add(item);
            _databaseTableName = source.DatabaseTableName;
            _databaseSchemaName = source.DatabaseSchemaName;
            _databaseFileGroupName = source.DatabaseFileGroupName;
            _customAddDatabaseCommandText = source.CustomAddDatabaseCommandText;
            _customUpdateDatabaseCommandText = source.CustomUpdateDatabaseCommandText;
            _customDeleteDatabaseCommandText = source.CustomDeleteDatabaseCommandText;
            if (source.PrimaryKeyConstraints is not null) foreach (var item in source.PrimaryKeyConstraints.Select(x => x.ToBuilder())) _primaryKeyConstraints.Add(item);
            if (source.ForeignKeyConstraints is not null) foreach (var item in source.ForeignKeyConstraints.Select(x => x.ToBuilder())) _foreignKeyConstraints.Add(item);
            if (source.Indexes is not null) foreach (var item in source.Indexes.Select(x => x.ToBuilder())) _indexes.Add(item);
            if (source.CheckConstraints is not null) foreach (var item in source.CheckConstraints.Select(x => x.ToBuilder())) _checkConstraints.Add(item);
            if (source.CustomEntityMappings is not null) foreach (var item in source.CustomEntityMappings.Select(x => x.ToBuilder())) _customEntityMappings.Add(item);
            _defaultOrderByFields = source.DefaultOrderByFields;
            _defaultWhereClause = source.DefaultWhereClause;
            _overridePageSize = source.OverridePageSize;
            if (source.AdditionalQueryFields is not null) foreach (var item in source.AdditionalQueryFields) _additionalQueryFields.Add(item);
            if (source.QueryFieldNameStatements is not null) foreach (var item in source.QueryFieldNameStatements.Select(x => x.ToBuilder())) _queryFieldNameStatements.Add(item);
            if (source.QueryExpressionStatements is not null) foreach (var item in source.QueryExpressionStatements.Select(x => x.ToBuilder())) _queryExpressionStatements.Add(item);
        }

        public DataObjectInfoBuilder()
        {
            _fields = new System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.FieldInfoBuilder>();
            _primaryKeyConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder>();
            _foreignKeyConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder>();
            _indexes = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexBuilder>();
            _checkConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder>();
            _customEntityMappings = new System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.EntityMappingBuilder>();
            _additionalQueryFields = new System.Collections.ObjectModel.ObservableCollection<string>();
            _queryFieldNameStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _queryExpressionStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _name = string.Empty;
            _isVisible = true;
            _isQueryable = true;
            _databaseTableName = string.Empty;
            _databaseSchemaName = string.Empty;
            _databaseFileGroupName = string.Empty;
            _customAddDatabaseCommandText = string.Empty;
            _customUpdateDatabaseCommandText = string.Empty;
            _customDeleteDatabaseCommandText = string.Empty;
            SetDefaultValues();
        }

        public DataFramework.Domain.DataObjectInfo Build()
        {
            return new DataFramework.Domain.DataObjectInfo(Name, AssemblyName, TypeName, Description, DisplayName, IsVisible, IsQueryable, IsReadOnly, Fields.Select(x => x.Build()!).ToList().AsReadOnly(), DatabaseTableName, DatabaseSchemaName, DatabaseFileGroupName, CustomAddDatabaseCommandText, CustomUpdateDatabaseCommandText, CustomDeleteDatabaseCommandText, PrimaryKeyConstraints.Select(x => x.Build()!).ToList().AsReadOnly(), ForeignKeyConstraints.Select(x => x.Build()!).ToList().AsReadOnly(), Indexes.Select(x => x.Build()!).ToList().AsReadOnly(), CheckConstraints.Select(x => x.Build()!).ToList().AsReadOnly(), CustomEntityMappings.Select(x => x.Build()!).ToList().AsReadOnly(), DefaultOrderByFields, DefaultWhereClause, OverridePageSize, AdditionalQueryFields, QueryFieldNameStatements.Select(x => x.Build()!).ToList().AsReadOnly(), QueryExpressionStatements.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddFields(System.Collections.Generic.IEnumerable<DataFramework.Domain.Builders.FieldInfoBuilder> fields)
        {
            if (fields is null) throw new System.ArgumentNullException(nameof(fields));
            return AddFields(fields.ToArray());
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddFields(params DataFramework.Domain.Builders.FieldInfoBuilder[] fields)
        {
            if (fields is null) throw new System.ArgumentNullException(nameof(fields));
            foreach (var item in fields) Fields.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddPrimaryKeyConstraints(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder> primaryKeyConstraints)
        {
            if (primaryKeyConstraints is null) throw new System.ArgumentNullException(nameof(primaryKeyConstraints));
            return AddPrimaryKeyConstraints(primaryKeyConstraints.ToArray());
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddPrimaryKeyConstraints(params DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder[] primaryKeyConstraints)
        {
            if (primaryKeyConstraints is null) throw new System.ArgumentNullException(nameof(primaryKeyConstraints));
            foreach (var item in primaryKeyConstraints) PrimaryKeyConstraints.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddForeignKeyConstraints(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder> foreignKeyConstraints)
        {
            if (foreignKeyConstraints is null) throw new System.ArgumentNullException(nameof(foreignKeyConstraints));
            return AddForeignKeyConstraints(foreignKeyConstraints.ToArray());
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddForeignKeyConstraints(params DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder[] foreignKeyConstraints)
        {
            if (foreignKeyConstraints is null) throw new System.ArgumentNullException(nameof(foreignKeyConstraints));
            foreach (var item in foreignKeyConstraints) ForeignKeyConstraints.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddIndexes(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.IndexBuilder> indexes)
        {
            if (indexes is null) throw new System.ArgumentNullException(nameof(indexes));
            return AddIndexes(indexes.ToArray());
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddIndexes(params DatabaseFramework.Domain.Builders.IndexBuilder[] indexes)
        {
            if (indexes is null) throw new System.ArgumentNullException(nameof(indexes));
            foreach (var item in indexes) Indexes.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddCheckConstraints(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.CheckConstraintBuilder> checkConstraints)
        {
            if (checkConstraints is null) throw new System.ArgumentNullException(nameof(checkConstraints));
            return AddCheckConstraints(checkConstraints.ToArray());
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddCheckConstraints(params DatabaseFramework.Domain.Builders.CheckConstraintBuilder[] checkConstraints)
        {
            if (checkConstraints is null) throw new System.ArgumentNullException(nameof(checkConstraints));
            foreach (var item in checkConstraints) CheckConstraints.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddCustomEntityMappings(System.Collections.Generic.IEnumerable<DataFramework.Domain.Builders.EntityMappingBuilder> customEntityMappings)
        {
            if (customEntityMappings is null) throw new System.ArgumentNullException(nameof(customEntityMappings));
            return AddCustomEntityMappings(customEntityMappings.ToArray());
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddCustomEntityMappings(params DataFramework.Domain.Builders.EntityMappingBuilder[] customEntityMappings)
        {
            if (customEntityMappings is null) throw new System.ArgumentNullException(nameof(customEntityMappings));
            foreach (var item in customEntityMappings) CustomEntityMappings.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddAdditionalQueryFields(System.Collections.Generic.IEnumerable<string> additionalQueryFields)
        {
            if (additionalQueryFields is null) throw new System.ArgumentNullException(nameof(additionalQueryFields));
            return AddAdditionalQueryFields(additionalQueryFields.ToArray());
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddAdditionalQueryFields(params string[] additionalQueryFields)
        {
            if (additionalQueryFields is null) throw new System.ArgumentNullException(nameof(additionalQueryFields));
            foreach (var item in additionalQueryFields) AdditionalQueryFields.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddQueryFieldNameStatements(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> queryFieldNameStatements)
        {
            if (queryFieldNameStatements is null) throw new System.ArgumentNullException(nameof(queryFieldNameStatements));
            return AddQueryFieldNameStatements(queryFieldNameStatements.ToArray());
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddQueryFieldNameStatements(params ClassFramework.Domain.Builders.CodeStatementBaseBuilder[] queryFieldNameStatements)
        {
            if (queryFieldNameStatements is null) throw new System.ArgumentNullException(nameof(queryFieldNameStatements));
            foreach (var item in queryFieldNameStatements) QueryFieldNameStatements.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddQueryExpressionStatements(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> queryExpressionStatements)
        {
            if (queryExpressionStatements is null) throw new System.ArgumentNullException(nameof(queryExpressionStatements));
            return AddQueryExpressionStatements(queryExpressionStatements.ToArray());
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddQueryExpressionStatements(params ClassFramework.Domain.Builders.CodeStatementBaseBuilder[] queryExpressionStatements)
        {
            if (queryExpressionStatements is null) throw new System.ArgumentNullException(nameof(queryExpressionStatements));
            foreach (var item in queryExpressionStatements) QueryExpressionStatements.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithAssemblyName(string? assemblyName)
        {
            AssemblyName = assemblyName;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithTypeName(string? typeName)
        {
            TypeName = typeName;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithDescription(string? description)
        {
            Description = description;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithDisplayName(string? displayName)
        {
            DisplayName = displayName;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithIsVisible(bool isVisible = true)
        {
            IsVisible = isVisible;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithIsQueryable(bool isQueryable = true)
        {
            IsQueryable = isQueryable;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithIsReadOnly(bool isReadOnly = true)
        {
            IsReadOnly = isReadOnly;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithDatabaseTableName(string databaseTableName)
        {
            if (databaseTableName is null) throw new System.ArgumentNullException(nameof(databaseTableName));
            DatabaseTableName = databaseTableName;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithDatabaseSchemaName(string databaseSchemaName)
        {
            if (databaseSchemaName is null) throw new System.ArgumentNullException(nameof(databaseSchemaName));
            DatabaseSchemaName = databaseSchemaName;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithDatabaseFileGroupName(string databaseFileGroupName)
        {
            if (databaseFileGroupName is null) throw new System.ArgumentNullException(nameof(databaseFileGroupName));
            DatabaseFileGroupName = databaseFileGroupName;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithCustomAddDatabaseCommandText(string customAddDatabaseCommandText)
        {
            if (customAddDatabaseCommandText is null) throw new System.ArgumentNullException(nameof(customAddDatabaseCommandText));
            CustomAddDatabaseCommandText = customAddDatabaseCommandText;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithCustomUpdateDatabaseCommandText(string customUpdateDatabaseCommandText)
        {
            if (customUpdateDatabaseCommandText is null) throw new System.ArgumentNullException(nameof(customUpdateDatabaseCommandText));
            CustomUpdateDatabaseCommandText = customUpdateDatabaseCommandText;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithCustomDeleteDatabaseCommandText(string customDeleteDatabaseCommandText)
        {
            if (customDeleteDatabaseCommandText is null) throw new System.ArgumentNullException(nameof(customDeleteDatabaseCommandText));
            CustomDeleteDatabaseCommandText = customDeleteDatabaseCommandText;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithDefaultOrderByFields(string? defaultOrderByFields)
        {
            DefaultOrderByFields = defaultOrderByFields;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithDefaultWhereClause(string? defaultWhereClause)
        {
            DefaultWhereClause = defaultWhereClause;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithOverridePageSize(System.Nullable<int> overridePageSize)
        {
            OverridePageSize = overridePageSize;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class EntityMappingBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _propertyName;

        private object _mapping;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string PropertyName
        {
            get
            {
                return _propertyName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_propertyName!, value!);
                _propertyName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(PropertyName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public object Mapping
        {
            get
            {
                return _mapping;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Object>.Default.Equals(_mapping!, value!);
                _mapping = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Mapping));
            }
        }

        public EntityMappingBuilder(DataFramework.Domain.EntityMapping source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _propertyName = source.PropertyName;
            _mapping = source.Mapping;
        }

        public EntityMappingBuilder()
        {
            _propertyName = string.Empty;
            _mapping = new System.Object();
            SetDefaultValues();
        }

        public DataFramework.Domain.EntityMapping Build()
        {
            return new DataFramework.Domain.EntityMapping(PropertyName, Mapping);
        }

        partial void SetDefaultValues();

        public DataFramework.Domain.Builders.EntityMappingBuilder WithPropertyName(string propertyName)
        {
            if (propertyName is null) throw new System.ArgumentNullException(nameof(propertyName));
            PropertyName = propertyName;
            return this;
        }

        public DataFramework.Domain.Builders.EntityMappingBuilder WithMapping(object mapping)
        {
            if (mapping is null) throw new System.ArgumentNullException(nameof(mapping));
            Mapping = mapping;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FieldInfoBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private string? _description;

        private string? _displayName;

        private string? _typeName;

        private bool _isNullable;

        private bool _isValueType;

        private bool _isVisible;

        private bool _isPersistable;

        private bool _canGet;

        private bool _canSet;

        private bool _isReadOnly;

        private bool _isIdentityField;

        private bool _isComputed;

        private bool _isRowVersion;

        private bool _useForConcurrencyCheck;

        private object? _defaultValue;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _getterCodeStatements;

        private System.Nullable<int> _stringMaxLength;

        private System.Nullable<bool> _isMaxLengthString;

        private string? _databaseStringCollation;

        private System.Nullable<byte> _databaseNumericPrecision;

        private System.Nullable<byte> _databaseNumericScale;

        private bool _skipFieldOnFind;

        private string? _databaseFieldName;

        private string? _databaseFieldType;

        private string? _databaseReaderMethodName;

        private string? _databaseCheckConstraintExpression;

        private System.Nullable<bool> _overrideUseOnInsert;

        private System.Nullable<bool> _overrideUseOnUpdate;

        private System.Nullable<bool> _overrideUseOnDelete;

        private System.Nullable<bool> _overrideUseOnSelect;

        private System.Nullable<bool> _isRequiredInDatabase;

        private bool _isDatabaseIdentityField;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        public string? Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value;
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public string? DisplayName
        {
            get
            {
                return _displayName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_displayName!, value!);
                _displayName = value;
                if (hasChanged) HandlePropertyChanged(nameof(DisplayName));
            }
        }

        public string? TypeName
        {
            get
            {
                return _typeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_typeName!, value!);
                _typeName = value;
                if (hasChanged) HandlePropertyChanged(nameof(TypeName));
            }
        }

        public bool IsNullable
        {
            get
            {
                return _isNullable;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isNullable, value);
                _isNullable = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsNullable));
            }
        }

        public bool IsValueType
        {
            get
            {
                return _isValueType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isValueType, value);
                _isValueType = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsValueType));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsVisible
        {
            get
            {
                return _isVisible;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isVisible, value);
                _isVisible = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsVisible));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsPersistable
        {
            get
            {
                return _isPersistable;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isPersistable, value);
                _isPersistable = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsPersistable));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool CanGet
        {
            get
            {
                return _canGet;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_canGet, value);
                _canGet = value;
                if (hasChanged) HandlePropertyChanged(nameof(CanGet));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool CanSet
        {
            get
            {
                return _canSet;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_canSet, value);
                _canSet = value;
                if (hasChanged) HandlePropertyChanged(nameof(CanSet));
            }
        }

        public bool IsReadOnly
        {
            get
            {
                return _isReadOnly;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isReadOnly, value);
                _isReadOnly = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsReadOnly));
            }
        }

        public bool IsIdentityField
        {
            get
            {
                return _isIdentityField;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isIdentityField, value);
                _isIdentityField = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsIdentityField));
            }
        }

        public bool IsComputed
        {
            get
            {
                return _isComputed;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isComputed, value);
                _isComputed = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsComputed));
            }
        }

        public bool IsRowVersion
        {
            get
            {
                return _isRowVersion;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isRowVersion, value);
                _isRowVersion = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsRowVersion));
            }
        }

        public bool UseForConcurrencyCheck
        {
            get
            {
                return _useForConcurrencyCheck;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_useForConcurrencyCheck, value);
                _useForConcurrencyCheck = value;
                if (hasChanged) HandlePropertyChanged(nameof(UseForConcurrencyCheck));
            }
        }

        public object? DefaultValue
        {
            get
            {
                return _defaultValue;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Object>.Default.Equals(_defaultValue!, value!);
                _defaultValue = value;
                if (hasChanged) HandlePropertyChanged(nameof(DefaultValue));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> GetterCodeStatements
        {
            get
            {
                return _getterCodeStatements;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>>.Default.Equals(_getterCodeStatements!, value!);
                _getterCodeStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(GetterCodeStatements));
            }
        }

        public System.Nullable<int> StringMaxLength
        {
            get
            {
                return _stringMaxLength;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Int32>>.Default.Equals(_stringMaxLength, value);
                _stringMaxLength = value;
                if (hasChanged) HandlePropertyChanged(nameof(StringMaxLength));
            }
        }

        public System.Nullable<bool> IsMaxLengthString
        {
            get
            {
                return _isMaxLengthString;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Boolean>>.Default.Equals(_isMaxLengthString, value);
                _isMaxLengthString = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsMaxLengthString));
            }
        }

        public string? DatabaseStringCollation
        {
            get
            {
                return _databaseStringCollation;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_databaseStringCollation!, value!);
                _databaseStringCollation = value;
                if (hasChanged) HandlePropertyChanged(nameof(DatabaseStringCollation));
            }
        }

        public System.Nullable<byte> DatabaseNumericPrecision
        {
            get
            {
                return _databaseNumericPrecision;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Byte>>.Default.Equals(_databaseNumericPrecision, value);
                _databaseNumericPrecision = value;
                if (hasChanged) HandlePropertyChanged(nameof(DatabaseNumericPrecision));
            }
        }

        public System.Nullable<byte> DatabaseNumericScale
        {
            get
            {
                return _databaseNumericScale;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Byte>>.Default.Equals(_databaseNumericScale, value);
                _databaseNumericScale = value;
                if (hasChanged) HandlePropertyChanged(nameof(DatabaseNumericScale));
            }
        }

        public bool SkipFieldOnFind
        {
            get
            {
                return _skipFieldOnFind;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_skipFieldOnFind, value);
                _skipFieldOnFind = value;
                if (hasChanged) HandlePropertyChanged(nameof(SkipFieldOnFind));
            }
        }

        public string? DatabaseFieldName
        {
            get
            {
                return _databaseFieldName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_databaseFieldName!, value!);
                _databaseFieldName = value;
                if (hasChanged) HandlePropertyChanged(nameof(DatabaseFieldName));
            }
        }

        public string? DatabaseFieldType
        {
            get
            {
                return _databaseFieldType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_databaseFieldType!, value!);
                _databaseFieldType = value;
                if (hasChanged) HandlePropertyChanged(nameof(DatabaseFieldType));
            }
        }

        public string? DatabaseReaderMethodName
        {
            get
            {
                return _databaseReaderMethodName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_databaseReaderMethodName!, value!);
                _databaseReaderMethodName = value;
                if (hasChanged) HandlePropertyChanged(nameof(DatabaseReaderMethodName));
            }
        }

        public string? DatabaseCheckConstraintExpression
        {
            get
            {
                return _databaseCheckConstraintExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_databaseCheckConstraintExpression!, value!);
                _databaseCheckConstraintExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(DatabaseCheckConstraintExpression));
            }
        }

        public System.Nullable<bool> OverrideUseOnInsert
        {
            get
            {
                return _overrideUseOnInsert;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Boolean>>.Default.Equals(_overrideUseOnInsert, value);
                _overrideUseOnInsert = value;
                if (hasChanged) HandlePropertyChanged(nameof(OverrideUseOnInsert));
            }
        }

        public System.Nullable<bool> OverrideUseOnUpdate
        {
            get
            {
                return _overrideUseOnUpdate;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Boolean>>.Default.Equals(_overrideUseOnUpdate, value);
                _overrideUseOnUpdate = value;
                if (hasChanged) HandlePropertyChanged(nameof(OverrideUseOnUpdate));
            }
        }

        public System.Nullable<bool> OverrideUseOnDelete
        {
            get
            {
                return _overrideUseOnDelete;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Boolean>>.Default.Equals(_overrideUseOnDelete, value);
                _overrideUseOnDelete = value;
                if (hasChanged) HandlePropertyChanged(nameof(OverrideUseOnDelete));
            }
        }

        public System.Nullable<bool> OverrideUseOnSelect
        {
            get
            {
                return _overrideUseOnSelect;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Boolean>>.Default.Equals(_overrideUseOnSelect, value);
                _overrideUseOnSelect = value;
                if (hasChanged) HandlePropertyChanged(nameof(OverrideUseOnSelect));
            }
        }

        public System.Nullable<bool> IsRequiredInDatabase
        {
            get
            {
                return _isRequiredInDatabase;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Boolean>>.Default.Equals(_isRequiredInDatabase, value);
                _isRequiredInDatabase = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsRequiredInDatabase));
            }
        }

        public bool IsDatabaseIdentityField
        {
            get
            {
                return _isDatabaseIdentityField;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_isDatabaseIdentityField, value);
                _isDatabaseIdentityField = value;
                if (hasChanged) HandlePropertyChanged(nameof(IsDatabaseIdentityField));
            }
        }

        public FieldInfoBuilder(DataFramework.Domain.FieldInfo source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _getterCodeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _name = source.Name;
            _description = source.Description;
            _displayName = source.DisplayName;
            _typeName = source.TypeName;
            _isNullable = source.IsNullable;
            _isValueType = source.IsValueType;
            _isVisible = source.IsVisible;
            _isPersistable = source.IsPersistable;
            _canGet = source.CanGet;
            _canSet = source.CanSet;
            _isReadOnly = source.IsReadOnly;
            _isIdentityField = source.IsIdentityField;
            _isComputed = source.IsComputed;
            _isRowVersion = source.IsRowVersion;
            _useForConcurrencyCheck = source.UseForConcurrencyCheck;
            _defaultValue = source.DefaultValue;
            if (source.GetterCodeStatements is not null) foreach (var item in source.GetterCodeStatements.Select(x => x.ToBuilder())) _getterCodeStatements.Add(item);
            _stringMaxLength = source.StringMaxLength;
            _isMaxLengthString = source.IsMaxLengthString;
            _databaseStringCollation = source.DatabaseStringCollation;
            _databaseNumericPrecision = source.DatabaseNumericPrecision;
            _databaseNumericScale = source.DatabaseNumericScale;
            _skipFieldOnFind = source.SkipFieldOnFind;
            _databaseFieldName = source.DatabaseFieldName;
            _databaseFieldType = source.DatabaseFieldType;
            _databaseReaderMethodName = source.DatabaseReaderMethodName;
            _databaseCheckConstraintExpression = source.DatabaseCheckConstraintExpression;
            _overrideUseOnInsert = source.OverrideUseOnInsert;
            _overrideUseOnUpdate = source.OverrideUseOnUpdate;
            _overrideUseOnDelete = source.OverrideUseOnDelete;
            _overrideUseOnSelect = source.OverrideUseOnSelect;
            _isRequiredInDatabase = source.IsRequiredInDatabase;
            _isDatabaseIdentityField = source.IsDatabaseIdentityField;
        }

        public FieldInfoBuilder()
        {
            _getterCodeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _name = string.Empty;
            _isVisible = true;
            _isPersistable = true;
            _canGet = true;
            _canSet = true;
            SetDefaultValues();
        }

        public DataFramework.Domain.FieldInfo Build()
        {
            return new DataFramework.Domain.FieldInfo(Name, Description, DisplayName, TypeName, IsNullable, IsValueType, IsVisible, IsPersistable, CanGet, CanSet, IsReadOnly, IsIdentityField, IsComputed, IsRowVersion, UseForConcurrencyCheck, DefaultValue, GetterCodeStatements.Select(x => x.Build()!).ToList().AsReadOnly(), StringMaxLength, IsMaxLengthString, DatabaseStringCollation, DatabaseNumericPrecision, DatabaseNumericScale, SkipFieldOnFind, DatabaseFieldName, DatabaseFieldType, DatabaseReaderMethodName, DatabaseCheckConstraintExpression, OverrideUseOnInsert, OverrideUseOnUpdate, OverrideUseOnDelete, OverrideUseOnSelect, IsRequiredInDatabase, IsDatabaseIdentityField);
        }

        partial void SetDefaultValues();

        public DataFramework.Domain.Builders.FieldInfoBuilder AddGetterCodeStatements(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> getterCodeStatements)
        {
            if (getterCodeStatements is null) throw new System.ArgumentNullException(nameof(getterCodeStatements));
            return AddGetterCodeStatements(getterCodeStatements.ToArray());
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder AddGetterCodeStatements(params ClassFramework.Domain.Builders.CodeStatementBaseBuilder[] getterCodeStatements)
        {
            if (getterCodeStatements is null) throw new System.ArgumentNullException(nameof(getterCodeStatements));
            foreach (var item in getterCodeStatements) GetterCodeStatements.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDescription(string? description)
        {
            Description = description;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDisplayName(string? displayName)
        {
            DisplayName = displayName;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithTypeName(string? typeName)
        {
            TypeName = typeName;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsNullable(bool isNullable = true)
        {
            IsNullable = isNullable;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsValueType(bool isValueType = true)
        {
            IsValueType = isValueType;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsVisible(bool isVisible = true)
        {
            IsVisible = isVisible;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsPersistable(bool isPersistable = true)
        {
            IsPersistable = isPersistable;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithCanGet(bool canGet = true)
        {
            CanGet = canGet;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithCanSet(bool canSet = true)
        {
            CanSet = canSet;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsReadOnly(bool isReadOnly = true)
        {
            IsReadOnly = isReadOnly;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsIdentityField(bool isIdentityField = true)
        {
            IsIdentityField = isIdentityField;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsComputed(bool isComputed = true)
        {
            IsComputed = isComputed;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsRowVersion(bool isRowVersion = true)
        {
            IsRowVersion = isRowVersion;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithUseForConcurrencyCheck(bool useForConcurrencyCheck = true)
        {
            UseForConcurrencyCheck = useForConcurrencyCheck;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDefaultValue(object? defaultValue)
        {
            DefaultValue = defaultValue;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithStringMaxLength(System.Nullable<int> stringMaxLength)
        {
            StringMaxLength = stringMaxLength;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsMaxLengthString(System.Nullable<bool> isMaxLengthString)
        {
            IsMaxLengthString = isMaxLengthString;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDatabaseStringCollation(string? databaseStringCollation)
        {
            DatabaseStringCollation = databaseStringCollation;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDatabaseNumericPrecision(System.Nullable<byte> databaseNumericPrecision)
        {
            DatabaseNumericPrecision = databaseNumericPrecision;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDatabaseNumericScale(System.Nullable<byte> databaseNumericScale)
        {
            DatabaseNumericScale = databaseNumericScale;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithSkipFieldOnFind(bool skipFieldOnFind = true)
        {
            SkipFieldOnFind = skipFieldOnFind;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDatabaseFieldName(string? databaseFieldName)
        {
            DatabaseFieldName = databaseFieldName;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDatabaseFieldType(string? databaseFieldType)
        {
            DatabaseFieldType = databaseFieldType;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDatabaseReaderMethodName(string? databaseReaderMethodName)
        {
            DatabaseReaderMethodName = databaseReaderMethodName;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDatabaseCheckConstraintExpression(string? databaseCheckConstraintExpression)
        {
            DatabaseCheckConstraintExpression = databaseCheckConstraintExpression;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithOverrideUseOnInsert(System.Nullable<bool> overrideUseOnInsert)
        {
            OverrideUseOnInsert = overrideUseOnInsert;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithOverrideUseOnUpdate(System.Nullable<bool> overrideUseOnUpdate)
        {
            OverrideUseOnUpdate = overrideUseOnUpdate;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithOverrideUseOnDelete(System.Nullable<bool> overrideUseOnDelete)
        {
            OverrideUseOnDelete = overrideUseOnDelete;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithOverrideUseOnSelect(System.Nullable<bool> overrideUseOnSelect)
        {
            OverrideUseOnSelect = overrideUseOnSelect;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsRequiredInDatabase(System.Nullable<bool> isRequiredInDatabase)
        {
            IsRequiredInDatabase = isRequiredInDatabase;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsDatabaseIdentityField(bool isDatabaseIdentityField = true)
        {
            IsDatabaseIdentityField = isDatabaseIdentityField;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
