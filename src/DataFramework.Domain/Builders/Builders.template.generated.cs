// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 8.0.5
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#nullable enable
namespace DataFramework.Domain.Builders
{
    public partial class DataObjectInfoBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private string? _assemblyName;

        private string? _typeName;

        private string? _description;

        private string? _displayName;

        private bool _isVisible;

        private bool _isQueryable;

        private bool _isReadOnly;

        private System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.FieldInfoBuilder> _fields;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(Name));
            }
        }

        public string? AssemblyName
        {
            get
            {
                return _assemblyName;
            }
            set
            {
                _assemblyName = value;
                HandlePropertyChanged(nameof(AssemblyName));
            }
        }

        public string? TypeName
        {
            get
            {
                return _typeName;
            }
            set
            {
                _typeName = value;
                HandlePropertyChanged(nameof(TypeName));
            }
        }

        public string? Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
                HandlePropertyChanged(nameof(Description));
            }
        }

        public string? DisplayName
        {
            get
            {
                return _displayName;
            }
            set
            {
                _displayName = value;
                HandlePropertyChanged(nameof(DisplayName));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsVisible
        {
            get
            {
                return _isVisible;
            }
            set
            {
                _isVisible = value;
                HandlePropertyChanged(nameof(IsVisible));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsQueryable
        {
            get
            {
                return _isQueryable;
            }
            set
            {
                _isQueryable = value;
                HandlePropertyChanged(nameof(IsQueryable));
            }
        }

        public bool IsReadOnly
        {
            get
            {
                return _isReadOnly;
            }
            set
            {
                _isReadOnly = value;
                HandlePropertyChanged(nameof(IsReadOnly));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.FieldInfoBuilder> Fields
        {
            get
            {
                return _fields;
            }
            set
            {
                _fields = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(Fields));
            }
        }

        public DataObjectInfoBuilder(DataFramework.Domain.DataObjectInfo source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _fields = new System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.FieldInfoBuilder>();
            _name = source.Name;
            _assemblyName = source.AssemblyName;
            _typeName = source.TypeName;
            _description = source.Description;
            _displayName = source.DisplayName;
            _isVisible = source.IsVisible;
            _isQueryable = source.IsQueryable;
            _isReadOnly = source.IsReadOnly;
            if (source.Fields is not null) foreach (var item in source.Fields.Select(x => x.ToBuilder())) _fields.Add(item);
        }

        public DataObjectInfoBuilder()
        {
            _fields = new System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.FieldInfoBuilder>();
            _name = string.Empty;
            _isVisible = true;
            _isQueryable = true;
            SetDefaultValues();
        }

        public DataFramework.Domain.DataObjectInfo Build()
        {
            return new DataFramework.Domain.DataObjectInfo(Name, AssemblyName, TypeName, Description, DisplayName, IsVisible, IsQueryable, IsReadOnly, Fields.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddFields(System.Collections.Generic.IEnumerable<DataFramework.Domain.Builders.FieldInfoBuilder> fields)
        {
            if (fields is null) throw new System.ArgumentNullException(nameof(fields));
            return AddFields(fields.ToArray());
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddFields(params DataFramework.Domain.Builders.FieldInfoBuilder[] fields)
        {
            if (fields is null) throw new System.ArgumentNullException(nameof(fields));
            foreach (var item in fields) Fields.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithAssemblyName(string? assemblyName)
        {
            AssemblyName = assemblyName;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithTypeName(string? typeName)
        {
            TypeName = typeName;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithDescription(string? description)
        {
            Description = description;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithDisplayName(string? displayName)
        {
            DisplayName = displayName;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithIsVisible(bool isVisible = true)
        {
            IsVisible = isVisible;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithIsQueryable(bool isQueryable = true)
        {
            IsQueryable = isQueryable;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithIsReadOnly(bool isReadOnly = true)
        {
            IsReadOnly = isReadOnly;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FieldInfoBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private string? _description;

        private string? _displayName;

        private string? _typeName;

        private bool _isNullable;

        private bool _isVisible;

        private bool _isPersistable;

        private bool _canGet;

        private bool _canSet;

        private bool _isReadOnly;

        private bool _isIdentityField;

        private bool _isComputed;

        private bool _useForConcurrencyCheck;

        private object? _defaultValue;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(Name));
            }
        }

        public string? Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
                HandlePropertyChanged(nameof(Description));
            }
        }

        public string? DisplayName
        {
            get
            {
                return _displayName;
            }
            set
            {
                _displayName = value;
                HandlePropertyChanged(nameof(DisplayName));
            }
        }

        public string? TypeName
        {
            get
            {
                return _typeName;
            }
            set
            {
                _typeName = value;
                HandlePropertyChanged(nameof(TypeName));
            }
        }

        public bool IsNullable
        {
            get
            {
                return _isNullable;
            }
            set
            {
                _isNullable = value;
                HandlePropertyChanged(nameof(IsNullable));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsVisible
        {
            get
            {
                return _isVisible;
            }
            set
            {
                _isVisible = value;
                HandlePropertyChanged(nameof(IsVisible));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsPersistable
        {
            get
            {
                return _isPersistable;
            }
            set
            {
                _isPersistable = value;
                HandlePropertyChanged(nameof(IsPersistable));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool CanGet
        {
            get
            {
                return _canGet;
            }
            set
            {
                _canGet = value;
                HandlePropertyChanged(nameof(CanGet));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool CanSet
        {
            get
            {
                return _canSet;
            }
            set
            {
                _canSet = value;
                HandlePropertyChanged(nameof(CanSet));
            }
        }

        public bool IsReadOnly
        {
            get
            {
                return _isReadOnly;
            }
            set
            {
                _isReadOnly = value;
                HandlePropertyChanged(nameof(IsReadOnly));
            }
        }

        public bool IsIdentityField
        {
            get
            {
                return _isIdentityField;
            }
            set
            {
                _isIdentityField = value;
                HandlePropertyChanged(nameof(IsIdentityField));
            }
        }

        public bool IsComputed
        {
            get
            {
                return _isComputed;
            }
            set
            {
                _isComputed = value;
                HandlePropertyChanged(nameof(IsComputed));
            }
        }

        public bool UseForConcurrencyCheck
        {
            get
            {
                return _useForConcurrencyCheck;
            }
            set
            {
                _useForConcurrencyCheck = value;
                HandlePropertyChanged(nameof(UseForConcurrencyCheck));
            }
        }

        public object? DefaultValue
        {
            get
            {
                return _defaultValue;
            }
            set
            {
                _defaultValue = value;
                HandlePropertyChanged(nameof(DefaultValue));
            }
        }

        public FieldInfoBuilder(DataFramework.Domain.FieldInfo source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _name = source.Name;
            _description = source.Description;
            _displayName = source.DisplayName;
            _typeName = source.TypeName;
            _isNullable = source.IsNullable;
            _isVisible = source.IsVisible;
            _isPersistable = source.IsPersistable;
            _canGet = source.CanGet;
            _canSet = source.CanSet;
            _isReadOnly = source.IsReadOnly;
            _isIdentityField = source.IsIdentityField;
            _isComputed = source.IsComputed;
            _useForConcurrencyCheck = source.UseForConcurrencyCheck;
            _defaultValue = source.DefaultValue;
        }

        public FieldInfoBuilder()
        {
            _name = string.Empty;
            _isVisible = true;
            _isPersistable = true;
            _canGet = true;
            _canSet = true;
            SetDefaultValues();
        }

        public DataFramework.Domain.FieldInfo Build()
        {
            return new DataFramework.Domain.FieldInfo(Name, Description, DisplayName, TypeName, IsNullable, IsVisible, IsPersistable, CanGet, CanSet, IsReadOnly, IsIdentityField, IsComputed, UseForConcurrencyCheck, DefaultValue);
        }

        partial void SetDefaultValues();

        public DataFramework.Domain.Builders.FieldInfoBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDescription(string? description)
        {
            Description = description;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDisplayName(string? displayName)
        {
            DisplayName = displayName;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithTypeName(string? typeName)
        {
            TypeName = typeName;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsNullable(bool isNullable = true)
        {
            IsNullable = isNullable;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsVisible(bool isVisible = true)
        {
            IsVisible = isVisible;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsPersistable(bool isPersistable = true)
        {
            IsPersistable = isPersistable;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithCanGet(bool canGet = true)
        {
            CanGet = canGet;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithCanSet(bool canSet = true)
        {
            CanSet = canSet;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsReadOnly(bool isReadOnly = true)
        {
            IsReadOnly = isReadOnly;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsIdentityField(bool isIdentityField = true)
        {
            IsIdentityField = isIdentityField;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsComputed(bool isComputed = true)
        {
            IsComputed = isComputed;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithUseForConcurrencyCheck(bool useForConcurrencyCheck = true)
        {
            UseForConcurrencyCheck = useForConcurrencyCheck;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDefaultValue(object? defaultValue)
        {
            DefaultValue = defaultValue;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
