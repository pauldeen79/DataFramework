// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 8.0.6
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#nullable enable
namespace DataFramework.Domain.Builders
{
    public partial class DataObjectInfoBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private string? _assemblyName;

        private string? _typeName;

        private string? _description;

        private string? _displayName;

        private bool _isVisible;

        private bool _isQueryable;

        private bool _isReadOnly;

        private System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.FieldInfoBuilder> _fields;

        private string _databaseTableName;

        private string _databaseSchemaName;

        private string _databaseFileGroupName;

        private string _customAddDatabaseCommandText;

        private string _customUpdateDatabaseCommandText;

        private string _customDeleteDatabaseCommandText;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder> _primaryKeyConstraints;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder> _foreignKeyConstraints;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexBuilder> _indexes;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder> _checkConstraints;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(Name));
            }
        }

        public string? AssemblyName
        {
            get
            {
                return _assemblyName;
            }
            set
            {
                _assemblyName = value;
                HandlePropertyChanged(nameof(AssemblyName));
            }
        }

        public string? TypeName
        {
            get
            {
                return _typeName;
            }
            set
            {
                _typeName = value;
                HandlePropertyChanged(nameof(TypeName));
            }
        }

        public string? Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
                HandlePropertyChanged(nameof(Description));
            }
        }

        public string? DisplayName
        {
            get
            {
                return _displayName;
            }
            set
            {
                _displayName = value;
                HandlePropertyChanged(nameof(DisplayName));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsVisible
        {
            get
            {
                return _isVisible;
            }
            set
            {
                _isVisible = value;
                HandlePropertyChanged(nameof(IsVisible));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsQueryable
        {
            get
            {
                return _isQueryable;
            }
            set
            {
                _isQueryable = value;
                HandlePropertyChanged(nameof(IsQueryable));
            }
        }

        public bool IsReadOnly
        {
            get
            {
                return _isReadOnly;
            }
            set
            {
                _isReadOnly = value;
                HandlePropertyChanged(nameof(IsReadOnly));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.FieldInfoBuilder> Fields
        {
            get
            {
                return _fields;
            }
            set
            {
                _fields = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(Fields));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string DatabaseTableName
        {
            get
            {
                return _databaseTableName;
            }
            set
            {
                _databaseTableName = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(DatabaseTableName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string DatabaseSchemaName
        {
            get
            {
                return _databaseSchemaName;
            }
            set
            {
                _databaseSchemaName = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(DatabaseSchemaName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string DatabaseFileGroupName
        {
            get
            {
                return _databaseFileGroupName;
            }
            set
            {
                _databaseFileGroupName = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(DatabaseFileGroupName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string CustomAddDatabaseCommandText
        {
            get
            {
                return _customAddDatabaseCommandText;
            }
            set
            {
                _customAddDatabaseCommandText = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(CustomAddDatabaseCommandText));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string CustomUpdateDatabaseCommandText
        {
            get
            {
                return _customUpdateDatabaseCommandText;
            }
            set
            {
                _customUpdateDatabaseCommandText = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(CustomUpdateDatabaseCommandText));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string CustomDeleteDatabaseCommandText
        {
            get
            {
                return _customDeleteDatabaseCommandText;
            }
            set
            {
                _customDeleteDatabaseCommandText = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(CustomDeleteDatabaseCommandText));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder> PrimaryKeyConstraints
        {
            get
            {
                return _primaryKeyConstraints;
            }
            set
            {
                _primaryKeyConstraints = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(PrimaryKeyConstraints));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder> ForeignKeyConstraints
        {
            get
            {
                return _foreignKeyConstraints;
            }
            set
            {
                _foreignKeyConstraints = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(ForeignKeyConstraints));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexBuilder> Indexes
        {
            get
            {
                return _indexes;
            }
            set
            {
                _indexes = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(Indexes));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder> CheckConstraints
        {
            get
            {
                return _checkConstraints;
            }
            set
            {
                _checkConstraints = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(CheckConstraints));
            }
        }

        public DataObjectInfoBuilder(DataFramework.Domain.DataObjectInfo source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _fields = new System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.FieldInfoBuilder>();
            _primaryKeyConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder>();
            _foreignKeyConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder>();
            _indexes = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexBuilder>();
            _checkConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder>();
            _name = source.Name;
            _assemblyName = source.AssemblyName;
            _typeName = source.TypeName;
            _description = source.Description;
            _displayName = source.DisplayName;
            _isVisible = source.IsVisible;
            _isQueryable = source.IsQueryable;
            _isReadOnly = source.IsReadOnly;
            if (source.Fields is not null) foreach (var item in source.Fields.Select(x => x.ToBuilder())) _fields.Add(item);
            _databaseTableName = source.DatabaseTableName;
            _databaseSchemaName = source.DatabaseSchemaName;
            _databaseFileGroupName = source.DatabaseFileGroupName;
            _customAddDatabaseCommandText = source.CustomAddDatabaseCommandText;
            _customUpdateDatabaseCommandText = source.CustomUpdateDatabaseCommandText;
            _customDeleteDatabaseCommandText = source.CustomDeleteDatabaseCommandText;
            if (source.PrimaryKeyConstraints is not null) foreach (var item in source.PrimaryKeyConstraints.Select(x => x.ToBuilder())) _primaryKeyConstraints.Add(item);
            if (source.ForeignKeyConstraints is not null) foreach (var item in source.ForeignKeyConstraints.Select(x => x.ToBuilder())) _foreignKeyConstraints.Add(item);
            if (source.Indexes is not null) foreach (var item in source.Indexes.Select(x => x.ToBuilder())) _indexes.Add(item);
            if (source.CheckConstraints is not null) foreach (var item in source.CheckConstraints.Select(x => x.ToBuilder())) _checkConstraints.Add(item);
        }

        public DataObjectInfoBuilder()
        {
            _fields = new System.Collections.ObjectModel.ObservableCollection<DataFramework.Domain.Builders.FieldInfoBuilder>();
            _primaryKeyConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder>();
            _foreignKeyConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder>();
            _indexes = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.IndexBuilder>();
            _checkConstraints = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.CheckConstraintBuilder>();
            _name = string.Empty;
            _isVisible = true;
            _isQueryable = true;
            _databaseTableName = string.Empty;
            _databaseSchemaName = string.Empty;
            _databaseFileGroupName = string.Empty;
            _customAddDatabaseCommandText = string.Empty;
            _customUpdateDatabaseCommandText = string.Empty;
            _customDeleteDatabaseCommandText = string.Empty;
            SetDefaultValues();
        }

        public DataFramework.Domain.DataObjectInfo Build()
        {
            return new DataFramework.Domain.DataObjectInfo(Name, AssemblyName, TypeName, Description, DisplayName, IsVisible, IsQueryable, IsReadOnly, Fields.Select(x => x.Build()!).ToList().AsReadOnly(), DatabaseTableName, DatabaseSchemaName, DatabaseFileGroupName, CustomAddDatabaseCommandText, CustomUpdateDatabaseCommandText, CustomDeleteDatabaseCommandText, PrimaryKeyConstraints.Select(x => x.Build()!).ToList().AsReadOnly(), ForeignKeyConstraints.Select(x => x.Build()!).ToList().AsReadOnly(), Indexes.Select(x => x.Build()!).ToList().AsReadOnly(), CheckConstraints.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddFields(System.Collections.Generic.IEnumerable<DataFramework.Domain.Builders.FieldInfoBuilder> fields)
        {
            if (fields is null) throw new System.ArgumentNullException(nameof(fields));
            return AddFields(fields.ToArray());
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddFields(params DataFramework.Domain.Builders.FieldInfoBuilder[] fields)
        {
            if (fields is null) throw new System.ArgumentNullException(nameof(fields));
            foreach (var item in fields) Fields.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddPrimaryKeyConstraints(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder> primaryKeyConstraints)
        {
            if (primaryKeyConstraints is null) throw new System.ArgumentNullException(nameof(primaryKeyConstraints));
            return AddPrimaryKeyConstraints(primaryKeyConstraints.ToArray());
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddPrimaryKeyConstraints(params DatabaseFramework.Domain.Builders.PrimaryKeyConstraintBuilder[] primaryKeyConstraints)
        {
            if (primaryKeyConstraints is null) throw new System.ArgumentNullException(nameof(primaryKeyConstraints));
            foreach (var item in primaryKeyConstraints) PrimaryKeyConstraints.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddForeignKeyConstraints(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder> foreignKeyConstraints)
        {
            if (foreignKeyConstraints is null) throw new System.ArgumentNullException(nameof(foreignKeyConstraints));
            return AddForeignKeyConstraints(foreignKeyConstraints.ToArray());
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddForeignKeyConstraints(params DatabaseFramework.Domain.Builders.ForeignKeyConstraintBuilder[] foreignKeyConstraints)
        {
            if (foreignKeyConstraints is null) throw new System.ArgumentNullException(nameof(foreignKeyConstraints));
            foreach (var item in foreignKeyConstraints) ForeignKeyConstraints.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddIndexes(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.IndexBuilder> indexes)
        {
            if (indexes is null) throw new System.ArgumentNullException(nameof(indexes));
            return AddIndexes(indexes.ToArray());
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddIndexes(params DatabaseFramework.Domain.Builders.IndexBuilder[] indexes)
        {
            if (indexes is null) throw new System.ArgumentNullException(nameof(indexes));
            foreach (var item in indexes) Indexes.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddCheckConstraints(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.CheckConstraintBuilder> checkConstraints)
        {
            if (checkConstraints is null) throw new System.ArgumentNullException(nameof(checkConstraints));
            return AddCheckConstraints(checkConstraints.ToArray());
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder AddCheckConstraints(params DatabaseFramework.Domain.Builders.CheckConstraintBuilder[] checkConstraints)
        {
            if (checkConstraints is null) throw new System.ArgumentNullException(nameof(checkConstraints));
            foreach (var item in checkConstraints) CheckConstraints.Add(item);
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithAssemblyName(string? assemblyName)
        {
            AssemblyName = assemblyName;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithTypeName(string? typeName)
        {
            TypeName = typeName;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithDescription(string? description)
        {
            Description = description;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithDisplayName(string? displayName)
        {
            DisplayName = displayName;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithIsVisible(bool isVisible = true)
        {
            IsVisible = isVisible;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithIsQueryable(bool isQueryable = true)
        {
            IsQueryable = isQueryable;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithIsReadOnly(bool isReadOnly = true)
        {
            IsReadOnly = isReadOnly;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithDatabaseTableName(string databaseTableName)
        {
            if (databaseTableName is null) throw new System.ArgumentNullException(nameof(databaseTableName));
            DatabaseTableName = databaseTableName;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithDatabaseSchemaName(string databaseSchemaName)
        {
            if (databaseSchemaName is null) throw new System.ArgumentNullException(nameof(databaseSchemaName));
            DatabaseSchemaName = databaseSchemaName;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithDatabaseFileGroupName(string databaseFileGroupName)
        {
            if (databaseFileGroupName is null) throw new System.ArgumentNullException(nameof(databaseFileGroupName));
            DatabaseFileGroupName = databaseFileGroupName;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithCustomAddDatabaseCommandText(string customAddDatabaseCommandText)
        {
            if (customAddDatabaseCommandText is null) throw new System.ArgumentNullException(nameof(customAddDatabaseCommandText));
            CustomAddDatabaseCommandText = customAddDatabaseCommandText;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithCustomUpdateDatabaseCommandText(string customUpdateDatabaseCommandText)
        {
            if (customUpdateDatabaseCommandText is null) throw new System.ArgumentNullException(nameof(customUpdateDatabaseCommandText));
            CustomUpdateDatabaseCommandText = customUpdateDatabaseCommandText;
            return this;
        }

        public DataFramework.Domain.Builders.DataObjectInfoBuilder WithCustomDeleteDatabaseCommandText(string customDeleteDatabaseCommandText)
        {
            if (customDeleteDatabaseCommandText is null) throw new System.ArgumentNullException(nameof(customDeleteDatabaseCommandText));
            CustomDeleteDatabaseCommandText = customDeleteDatabaseCommandText;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class FieldInfoBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private string? _description;

        private string? _displayName;

        private string? _typeName;

        private bool _isNullable;

        private bool _isVisible;

        private bool _isPersistable;

        private bool _canGet;

        private bool _canSet;

        private bool _isReadOnly;

        private bool _isIdentityField;

        private bool _isComputed;

        private bool _isRowVersion;

        private bool _useForConcurrencyCheck;

        private object? _defaultValue;

        private System.Nullable<int> _stringMaxLength;

        private System.Nullable<bool> _isMaxLengthString;

        private string? _databaseStringCollation;

        private System.Nullable<byte> _databaseNumericPrecision;

        private System.Nullable<byte> _databaseNumericScale;

        private bool _skipFieldOnFind;

        private string? _databaseFieldName;

        private string? _databaseFieldType;

        private string? _databaseReaderMethodName;

        private string? _databaseCheckConstraintExpression;

        private System.Nullable<bool> _overrideUseOnInsert;

        private System.Nullable<bool> _overrideUseOnUpdate;

        private System.Nullable<bool> _overrideUseOnDelete;

        private System.Nullable<bool> _overrideUseOnSelect;

        private System.Nullable<bool> _isRequiredInDatabase;

        private bool _isDatabaseIdentityField;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(Name));
            }
        }

        public string? Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
                HandlePropertyChanged(nameof(Description));
            }
        }

        public string? DisplayName
        {
            get
            {
                return _displayName;
            }
            set
            {
                _displayName = value;
                HandlePropertyChanged(nameof(DisplayName));
            }
        }

        public string? TypeName
        {
            get
            {
                return _typeName;
            }
            set
            {
                _typeName = value;
                HandlePropertyChanged(nameof(TypeName));
            }
        }

        public bool IsNullable
        {
            get
            {
                return _isNullable;
            }
            set
            {
                _isNullable = value;
                HandlePropertyChanged(nameof(IsNullable));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsVisible
        {
            get
            {
                return _isVisible;
            }
            set
            {
                _isVisible = value;
                HandlePropertyChanged(nameof(IsVisible));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IsPersistable
        {
            get
            {
                return _isPersistable;
            }
            set
            {
                _isPersistable = value;
                HandlePropertyChanged(nameof(IsPersistable));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool CanGet
        {
            get
            {
                return _canGet;
            }
            set
            {
                _canGet = value;
                HandlePropertyChanged(nameof(CanGet));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool CanSet
        {
            get
            {
                return _canSet;
            }
            set
            {
                _canSet = value;
                HandlePropertyChanged(nameof(CanSet));
            }
        }

        public bool IsReadOnly
        {
            get
            {
                return _isReadOnly;
            }
            set
            {
                _isReadOnly = value;
                HandlePropertyChanged(nameof(IsReadOnly));
            }
        }

        public bool IsIdentityField
        {
            get
            {
                return _isIdentityField;
            }
            set
            {
                _isIdentityField = value;
                HandlePropertyChanged(nameof(IsIdentityField));
            }
        }

        public bool IsComputed
        {
            get
            {
                return _isComputed;
            }
            set
            {
                _isComputed = value;
                HandlePropertyChanged(nameof(IsComputed));
            }
        }

        public bool IsRowVersion
        {
            get
            {
                return _isRowVersion;
            }
            set
            {
                _isRowVersion = value;
                HandlePropertyChanged(nameof(IsRowVersion));
            }
        }

        public bool UseForConcurrencyCheck
        {
            get
            {
                return _useForConcurrencyCheck;
            }
            set
            {
                _useForConcurrencyCheck = value;
                HandlePropertyChanged(nameof(UseForConcurrencyCheck));
            }
        }

        public object? DefaultValue
        {
            get
            {
                return _defaultValue;
            }
            set
            {
                _defaultValue = value;
                HandlePropertyChanged(nameof(DefaultValue));
            }
        }

        public System.Nullable<int> StringMaxLength
        {
            get
            {
                return _stringMaxLength;
            }
            set
            {
                _stringMaxLength = value;
                HandlePropertyChanged(nameof(StringMaxLength));
            }
        }

        public System.Nullable<bool> IsMaxLengthString
        {
            get
            {
                return _isMaxLengthString;
            }
            set
            {
                _isMaxLengthString = value;
                HandlePropertyChanged(nameof(IsMaxLengthString));
            }
        }

        public string? DatabaseStringCollation
        {
            get
            {
                return _databaseStringCollation;
            }
            set
            {
                _databaseStringCollation = value;
                HandlePropertyChanged(nameof(DatabaseStringCollation));
            }
        }

        public System.Nullable<byte> DatabaseNumericPrecision
        {
            get
            {
                return _databaseNumericPrecision;
            }
            set
            {
                _databaseNumericPrecision = value;
                HandlePropertyChanged(nameof(DatabaseNumericPrecision));
            }
        }

        public System.Nullable<byte> DatabaseNumericScale
        {
            get
            {
                return _databaseNumericScale;
            }
            set
            {
                _databaseNumericScale = value;
                HandlePropertyChanged(nameof(DatabaseNumericScale));
            }
        }

        public bool SkipFieldOnFind
        {
            get
            {
                return _skipFieldOnFind;
            }
            set
            {
                _skipFieldOnFind = value;
                HandlePropertyChanged(nameof(SkipFieldOnFind));
            }
        }

        public string? DatabaseFieldName
        {
            get
            {
                return _databaseFieldName;
            }
            set
            {
                _databaseFieldName = value;
                HandlePropertyChanged(nameof(DatabaseFieldName));
            }
        }

        public string? DatabaseFieldType
        {
            get
            {
                return _databaseFieldType;
            }
            set
            {
                _databaseFieldType = value;
                HandlePropertyChanged(nameof(DatabaseFieldType));
            }
        }

        public string? DatabaseReaderMethodName
        {
            get
            {
                return _databaseReaderMethodName;
            }
            set
            {
                _databaseReaderMethodName = value;
                HandlePropertyChanged(nameof(DatabaseReaderMethodName));
            }
        }

        public string? DatabaseCheckConstraintExpression
        {
            get
            {
                return _databaseCheckConstraintExpression;
            }
            set
            {
                _databaseCheckConstraintExpression = value;
                HandlePropertyChanged(nameof(DatabaseCheckConstraintExpression));
            }
        }

        public System.Nullable<bool> OverrideUseOnInsert
        {
            get
            {
                return _overrideUseOnInsert;
            }
            set
            {
                _overrideUseOnInsert = value;
                HandlePropertyChanged(nameof(OverrideUseOnInsert));
            }
        }

        public System.Nullable<bool> OverrideUseOnUpdate
        {
            get
            {
                return _overrideUseOnUpdate;
            }
            set
            {
                _overrideUseOnUpdate = value;
                HandlePropertyChanged(nameof(OverrideUseOnUpdate));
            }
        }

        public System.Nullable<bool> OverrideUseOnDelete
        {
            get
            {
                return _overrideUseOnDelete;
            }
            set
            {
                _overrideUseOnDelete = value;
                HandlePropertyChanged(nameof(OverrideUseOnDelete));
            }
        }

        public System.Nullable<bool> OverrideUseOnSelect
        {
            get
            {
                return _overrideUseOnSelect;
            }
            set
            {
                _overrideUseOnSelect = value;
                HandlePropertyChanged(nameof(OverrideUseOnSelect));
            }
        }

        public System.Nullable<bool> IsRequiredInDatabase
        {
            get
            {
                return _isRequiredInDatabase;
            }
            set
            {
                _isRequiredInDatabase = value;
                HandlePropertyChanged(nameof(IsRequiredInDatabase));
            }
        }

        public bool IsDatabaseIdentityField
        {
            get
            {
                return _isDatabaseIdentityField;
            }
            set
            {
                _isDatabaseIdentityField = value;
                HandlePropertyChanged(nameof(IsDatabaseIdentityField));
            }
        }

        public FieldInfoBuilder(DataFramework.Domain.FieldInfo source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _name = source.Name;
            _description = source.Description;
            _displayName = source.DisplayName;
            _typeName = source.TypeName;
            _isNullable = source.IsNullable;
            _isVisible = source.IsVisible;
            _isPersistable = source.IsPersistable;
            _canGet = source.CanGet;
            _canSet = source.CanSet;
            _isReadOnly = source.IsReadOnly;
            _isIdentityField = source.IsIdentityField;
            _isComputed = source.IsComputed;
            _isRowVersion = source.IsRowVersion;
            _useForConcurrencyCheck = source.UseForConcurrencyCheck;
            _defaultValue = source.DefaultValue;
            _stringMaxLength = source.StringMaxLength;
            _isMaxLengthString = source.IsMaxLengthString;
            _databaseStringCollation = source.DatabaseStringCollation;
            _databaseNumericPrecision = source.DatabaseNumericPrecision;
            _databaseNumericScale = source.DatabaseNumericScale;
            _skipFieldOnFind = source.SkipFieldOnFind;
            _databaseFieldName = source.DatabaseFieldName;
            _databaseFieldType = source.DatabaseFieldType;
            _databaseReaderMethodName = source.DatabaseReaderMethodName;
            _databaseCheckConstraintExpression = source.DatabaseCheckConstraintExpression;
            _overrideUseOnInsert = source.OverrideUseOnInsert;
            _overrideUseOnUpdate = source.OverrideUseOnUpdate;
            _overrideUseOnDelete = source.OverrideUseOnDelete;
            _overrideUseOnSelect = source.OverrideUseOnSelect;
            _isRequiredInDatabase = source.IsRequiredInDatabase;
            _isDatabaseIdentityField = source.IsDatabaseIdentityField;
        }

        public FieldInfoBuilder()
        {
            _name = string.Empty;
            _isVisible = true;
            _isPersistable = true;
            _canGet = true;
            _canSet = true;
            SetDefaultValues();
        }

        public DataFramework.Domain.FieldInfo Build()
        {
            return new DataFramework.Domain.FieldInfo(Name, Description, DisplayName, TypeName, IsNullable, IsVisible, IsPersistable, CanGet, CanSet, IsReadOnly, IsIdentityField, IsComputed, IsRowVersion, UseForConcurrencyCheck, DefaultValue, StringMaxLength, IsMaxLengthString, DatabaseStringCollation, DatabaseNumericPrecision, DatabaseNumericScale, SkipFieldOnFind, DatabaseFieldName, DatabaseFieldType, DatabaseReaderMethodName, DatabaseCheckConstraintExpression, OverrideUseOnInsert, OverrideUseOnUpdate, OverrideUseOnDelete, OverrideUseOnSelect, IsRequiredInDatabase, IsDatabaseIdentityField);
        }

        partial void SetDefaultValues();

        public DataFramework.Domain.Builders.FieldInfoBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDescription(string? description)
        {
            Description = description;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDisplayName(string? displayName)
        {
            DisplayName = displayName;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithTypeName(string? typeName)
        {
            TypeName = typeName;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsNullable(bool isNullable = true)
        {
            IsNullable = isNullable;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsVisible(bool isVisible = true)
        {
            IsVisible = isVisible;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsPersistable(bool isPersistable = true)
        {
            IsPersistable = isPersistable;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithCanGet(bool canGet = true)
        {
            CanGet = canGet;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithCanSet(bool canSet = true)
        {
            CanSet = canSet;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsReadOnly(bool isReadOnly = true)
        {
            IsReadOnly = isReadOnly;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsIdentityField(bool isIdentityField = true)
        {
            IsIdentityField = isIdentityField;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsComputed(bool isComputed = true)
        {
            IsComputed = isComputed;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsRowVersion(bool isRowVersion = true)
        {
            IsRowVersion = isRowVersion;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithUseForConcurrencyCheck(bool useForConcurrencyCheck = true)
        {
            UseForConcurrencyCheck = useForConcurrencyCheck;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDefaultValue(object? defaultValue)
        {
            DefaultValue = defaultValue;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithStringMaxLength(System.Nullable<int> stringMaxLength)
        {
            StringMaxLength = stringMaxLength;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsMaxLengthString(System.Nullable<bool> isMaxLengthString)
        {
            IsMaxLengthString = isMaxLengthString;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDatabaseStringCollation(string? databaseStringCollation)
        {
            DatabaseStringCollation = databaseStringCollation;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDatabaseNumericPrecision(System.Nullable<byte> databaseNumericPrecision)
        {
            DatabaseNumericPrecision = databaseNumericPrecision;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDatabaseNumericScale(System.Nullable<byte> databaseNumericScale)
        {
            DatabaseNumericScale = databaseNumericScale;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithSkipFieldOnFind(bool skipFieldOnFind = true)
        {
            SkipFieldOnFind = skipFieldOnFind;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDatabaseFieldName(string? databaseFieldName)
        {
            DatabaseFieldName = databaseFieldName;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDatabaseFieldType(string? databaseFieldType)
        {
            DatabaseFieldType = databaseFieldType;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDatabaseReaderMethodName(string? databaseReaderMethodName)
        {
            DatabaseReaderMethodName = databaseReaderMethodName;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithDatabaseCheckConstraintExpression(string? databaseCheckConstraintExpression)
        {
            DatabaseCheckConstraintExpression = databaseCheckConstraintExpression;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithOverrideUseOnInsert(System.Nullable<bool> overrideUseOnInsert)
        {
            OverrideUseOnInsert = overrideUseOnInsert;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithOverrideUseOnUpdate(System.Nullable<bool> overrideUseOnUpdate)
        {
            OverrideUseOnUpdate = overrideUseOnUpdate;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithOverrideUseOnDelete(System.Nullable<bool> overrideUseOnDelete)
        {
            OverrideUseOnDelete = overrideUseOnDelete;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithOverrideUseOnSelect(System.Nullable<bool> overrideUseOnSelect)
        {
            OverrideUseOnSelect = overrideUseOnSelect;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsRequiredInDatabase(System.Nullable<bool> isRequiredInDatabase)
        {
            IsRequiredInDatabase = isRequiredInDatabase;
            return this;
        }

        public DataFramework.Domain.Builders.FieldInfoBuilder WithIsDatabaseIdentityField(bool isDatabaseIdentityField = true)
        {
            IsDatabaseIdentityField = isDatabaseIdentityField;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
