// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 8.0.8
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#nullable enable
namespace DataFramework.Pipelines.Builders
{
    public partial class PipelineSettingsBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private bool _enableNullableContext;

        private DataFramework.Pipelines.Domains.ConcurrencyCheckBehavior _concurrencyCheckBehavior;

        private DataFramework.Pipelines.Domains.EntityClassType _entityClassType;

        private string _defaultEntityNamespace;

        private string _defaultIdentityNamespace;

        private string _defaultBuilderNamespace;

        private bool _addComponentModelAttributes;

        private ClassFramework.Domain.Domains.Visibility _commandEntityProviderVisibility;

        private string _commandEntityProviderNamespace;

        private bool _commandProviderEnableAdd;

        private bool _commandProviderEnableUpdate;

        private bool _commandProviderEnableDelete;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _commandEntityProviderAddResultEntityStatements;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _commandEntityProviderAddAfterReadStatements;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _commandEntityProviderUpdateResultEntityStatements;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _commandEntityProviderUpdateAfterReadStatements;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _commandEntityProviderDeleteResultEntityStatements;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _commandEntityProviderDeleteAfterReadStatements;

        private ClassFramework.Domain.Domains.Visibility _commandProviderVisibility;

        private string _commandProviderNamespace;

        private bool _useAddStoredProcedure;

        private bool _useUpdateStoredProcedure;

        private bool _useDeleteStoredProcedure;

        private ClassFramework.Domain.Domains.Visibility _databaseEntityRetrieverProviderVisibility;

        private string _databaseEntityRetrieverProviderNamespace;

        private string _addStoredProcedureName;

        private string _updateStoredProcedureName;

        private string _deleteStoredProcedureName;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder> _addStoredProcedureStatements;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder> _updateStoredProcedureStatements;

        private System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder> _deleteStoredProcedureStatements;

        private CrossCutting.Data.Abstractions.DatabaseOperation _databaseCommandTypeForInsertText;

        private CrossCutting.Data.Abstractions.DatabaseOperation _databaseCommandTypeForInsertParameters;

        private CrossCutting.Data.Abstractions.DatabaseOperation _databaseCommandTypeForUpdateText;

        private CrossCutting.Data.Abstractions.DatabaseOperation _databaseCommandTypeForUpdateParameters;

        private CrossCutting.Data.Abstractions.DatabaseOperation _databaseCommandTypeForDeleteText;

        private CrossCutting.Data.Abstractions.DatabaseOperation _databaseCommandTypeForDeleteParameters;

        private ClassFramework.Domain.Domains.Visibility _entityMapperVisibility;

        private string _entityMapperNamespace;

        private ClassFramework.Domain.Domains.Visibility _entityRetrieverVisibility;

        private string _entityRetrieverNamespace;

        private ClassFramework.Domain.Domains.Visibility _identityCommandProviderVisibility;

        private string _identityCommandProviderNamespace;

        private ClassFramework.Domain.Domains.Visibility _pagedEntityRetrieverSettingsVisibility;

        private string _pagedEntityRetrieverSettingsNamespace;

        private ClassFramework.Domain.Domains.Visibility _queryVisibility;

        private string _queryNamespace;

        private System.Nullable<int> _queryMaxLimit;

        private bool _createQueryAsRecord;

        private ClassFramework.Domain.Domains.Visibility _queryFieldInfoVisibility;

        private string _queryFieldInfoNamespace;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.FieldBuilder> _queryFieldInfoFields;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.ParameterBuilder> _queryFieldInfoConstructorParameters;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _queryFieldInfoConstructorCodeStatements;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _queryFieldInfoGetAllFieldsCodeStatements;

        private System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> _queryFieldInfoGetDatabaseFieldNameCodeStatements;

        private ClassFramework.Domain.Domains.Visibility _repositoryVisibility;

        private ClassFramework.Domain.Domains.Visibility _repositoryInterfaceVisibility;

        private bool _useRepositoryInterface;

        private string _repositoryNamespace;

        private string _repositoryInterfaceNamespace;

        private ClassFramework.Domain.Domains.Visibility _dependencyInjectionVisibility;

        private string _dependencyInjectionNamespace;

        private string _dependencyInjectionMethodName;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public bool EnableNullableContext
        {
            get
            {
                return _enableNullableContext;
            }
            set
            {
                _enableNullableContext = value;
                HandlePropertyChanged(nameof(EnableNullableContext));
            }
        }

        public DataFramework.Pipelines.Domains.ConcurrencyCheckBehavior ConcurrencyCheckBehavior
        {
            get
            {
                return _concurrencyCheckBehavior;
            }
            set
            {
                _concurrencyCheckBehavior = value;
                HandlePropertyChanged(nameof(ConcurrencyCheckBehavior));
            }
        }

        public DataFramework.Pipelines.Domains.EntityClassType EntityClassType
        {
            get
            {
                return _entityClassType;
            }
            set
            {
                _entityClassType = value;
                HandlePropertyChanged(nameof(EntityClassType));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string DefaultEntityNamespace
        {
            get
            {
                return _defaultEntityNamespace;
            }
            set
            {
                _defaultEntityNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(DefaultEntityNamespace));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string DefaultIdentityNamespace
        {
            get
            {
                return _defaultIdentityNamespace;
            }
            set
            {
                _defaultIdentityNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(DefaultIdentityNamespace));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string DefaultBuilderNamespace
        {
            get
            {
                return _defaultBuilderNamespace;
            }
            set
            {
                _defaultBuilderNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(DefaultBuilderNamespace));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool AddComponentModelAttributes
        {
            get
            {
                return _addComponentModelAttributes;
            }
            set
            {
                _addComponentModelAttributes = value;
                HandlePropertyChanged(nameof(AddComponentModelAttributes));
            }
        }

        public ClassFramework.Domain.Domains.Visibility CommandEntityProviderVisibility
        {
            get
            {
                return _commandEntityProviderVisibility;
            }
            set
            {
                _commandEntityProviderVisibility = value;
                HandlePropertyChanged(nameof(CommandEntityProviderVisibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string CommandEntityProviderNamespace
        {
            get
            {
                return _commandEntityProviderNamespace;
            }
            set
            {
                _commandEntityProviderNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(CommandEntityProviderNamespace));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool CommandProviderEnableAdd
        {
            get
            {
                return _commandProviderEnableAdd;
            }
            set
            {
                _commandProviderEnableAdd = value;
                HandlePropertyChanged(nameof(CommandProviderEnableAdd));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool CommandProviderEnableUpdate
        {
            get
            {
                return _commandProviderEnableUpdate;
            }
            set
            {
                _commandProviderEnableUpdate = value;
                HandlePropertyChanged(nameof(CommandProviderEnableUpdate));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool CommandProviderEnableDelete
        {
            get
            {
                return _commandProviderEnableDelete;
            }
            set
            {
                _commandProviderEnableDelete = value;
                HandlePropertyChanged(nameof(CommandProviderEnableDelete));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> CommandEntityProviderAddResultEntityStatements
        {
            get
            {
                return _commandEntityProviderAddResultEntityStatements;
            }
            set
            {
                _commandEntityProviderAddResultEntityStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(CommandEntityProviderAddResultEntityStatements));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> CommandEntityProviderAddAfterReadStatements
        {
            get
            {
                return _commandEntityProviderAddAfterReadStatements;
            }
            set
            {
                _commandEntityProviderAddAfterReadStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(CommandEntityProviderAddAfterReadStatements));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> CommandEntityProviderUpdateResultEntityStatements
        {
            get
            {
                return _commandEntityProviderUpdateResultEntityStatements;
            }
            set
            {
                _commandEntityProviderUpdateResultEntityStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(CommandEntityProviderUpdateResultEntityStatements));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> CommandEntityProviderUpdateAfterReadStatements
        {
            get
            {
                return _commandEntityProviderUpdateAfterReadStatements;
            }
            set
            {
                _commandEntityProviderUpdateAfterReadStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(CommandEntityProviderUpdateAfterReadStatements));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> CommandEntityProviderDeleteResultEntityStatements
        {
            get
            {
                return _commandEntityProviderDeleteResultEntityStatements;
            }
            set
            {
                _commandEntityProviderDeleteResultEntityStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(CommandEntityProviderDeleteResultEntityStatements));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> CommandEntityProviderDeleteAfterReadStatements
        {
            get
            {
                return _commandEntityProviderDeleteAfterReadStatements;
            }
            set
            {
                _commandEntityProviderDeleteAfterReadStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(CommandEntityProviderDeleteAfterReadStatements));
            }
        }

        public ClassFramework.Domain.Domains.Visibility CommandProviderVisibility
        {
            get
            {
                return _commandProviderVisibility;
            }
            set
            {
                _commandProviderVisibility = value;
                HandlePropertyChanged(nameof(CommandProviderVisibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string CommandProviderNamespace
        {
            get
            {
                return _commandProviderNamespace;
            }
            set
            {
                _commandProviderNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(CommandProviderNamespace));
            }
        }

        public bool UseAddStoredProcedure
        {
            get
            {
                return _useAddStoredProcedure;
            }
            set
            {
                _useAddStoredProcedure = value;
                HandlePropertyChanged(nameof(UseAddStoredProcedure));
            }
        }

        public bool UseUpdateStoredProcedure
        {
            get
            {
                return _useUpdateStoredProcedure;
            }
            set
            {
                _useUpdateStoredProcedure = value;
                HandlePropertyChanged(nameof(UseUpdateStoredProcedure));
            }
        }

        public bool UseDeleteStoredProcedure
        {
            get
            {
                return _useDeleteStoredProcedure;
            }
            set
            {
                _useDeleteStoredProcedure = value;
                HandlePropertyChanged(nameof(UseDeleteStoredProcedure));
            }
        }

        public ClassFramework.Domain.Domains.Visibility DatabaseEntityRetrieverProviderVisibility
        {
            get
            {
                return _databaseEntityRetrieverProviderVisibility;
            }
            set
            {
                _databaseEntityRetrieverProviderVisibility = value;
                HandlePropertyChanged(nameof(DatabaseEntityRetrieverProviderVisibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string DatabaseEntityRetrieverProviderNamespace
        {
            get
            {
                return _databaseEntityRetrieverProviderNamespace;
            }
            set
            {
                _databaseEntityRetrieverProviderNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(DatabaseEntityRetrieverProviderNamespace));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string AddStoredProcedureName
        {
            get
            {
                return _addStoredProcedureName;
            }
            set
            {
                _addStoredProcedureName = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(AddStoredProcedureName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string UpdateStoredProcedureName
        {
            get
            {
                return _updateStoredProcedureName;
            }
            set
            {
                _updateStoredProcedureName = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(UpdateStoredProcedureName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string DeleteStoredProcedureName
        {
            get
            {
                return _deleteStoredProcedureName;
            }
            set
            {
                _deleteStoredProcedureName = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(DeleteStoredProcedureName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder> AddStoredProcedureStatements
        {
            get
            {
                return _addStoredProcedureStatements;
            }
            set
            {
                _addStoredProcedureStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(AddStoredProcedureStatements));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder> UpdateStoredProcedureStatements
        {
            get
            {
                return _updateStoredProcedureStatements;
            }
            set
            {
                _updateStoredProcedureStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(UpdateStoredProcedureStatements));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder> DeleteStoredProcedureStatements
        {
            get
            {
                return _deleteStoredProcedureStatements;
            }
            set
            {
                _deleteStoredProcedureStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(DeleteStoredProcedureStatements));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(CrossCutting.Data.Abstractions.DatabaseOperation.Insert)]
        public CrossCutting.Data.Abstractions.DatabaseOperation DatabaseCommandTypeForInsertText
        {
            get
            {
                return _databaseCommandTypeForInsertText;
            }
            set
            {
                _databaseCommandTypeForInsertText = value;
                HandlePropertyChanged(nameof(DatabaseCommandTypeForInsertText));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(CrossCutting.Data.Abstractions.DatabaseOperation.Insert)]
        public CrossCutting.Data.Abstractions.DatabaseOperation DatabaseCommandTypeForInsertParameters
        {
            get
            {
                return _databaseCommandTypeForInsertParameters;
            }
            set
            {
                _databaseCommandTypeForInsertParameters = value;
                HandlePropertyChanged(nameof(DatabaseCommandTypeForInsertParameters));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(CrossCutting.Data.Abstractions.DatabaseOperation.Update)]
        public CrossCutting.Data.Abstractions.DatabaseOperation DatabaseCommandTypeForUpdateText
        {
            get
            {
                return _databaseCommandTypeForUpdateText;
            }
            set
            {
                _databaseCommandTypeForUpdateText = value;
                HandlePropertyChanged(nameof(DatabaseCommandTypeForUpdateText));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(CrossCutting.Data.Abstractions.DatabaseOperation.Update)]
        public CrossCutting.Data.Abstractions.DatabaseOperation DatabaseCommandTypeForUpdateParameters
        {
            get
            {
                return _databaseCommandTypeForUpdateParameters;
            }
            set
            {
                _databaseCommandTypeForUpdateParameters = value;
                HandlePropertyChanged(nameof(DatabaseCommandTypeForUpdateParameters));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(CrossCutting.Data.Abstractions.DatabaseOperation.Delete)]
        public CrossCutting.Data.Abstractions.DatabaseOperation DatabaseCommandTypeForDeleteText
        {
            get
            {
                return _databaseCommandTypeForDeleteText;
            }
            set
            {
                _databaseCommandTypeForDeleteText = value;
                HandlePropertyChanged(nameof(DatabaseCommandTypeForDeleteText));
            }
        }

        [System.ComponentModel.DefaultValueAttribute(CrossCutting.Data.Abstractions.DatabaseOperation.Delete)]
        public CrossCutting.Data.Abstractions.DatabaseOperation DatabaseCommandTypeForDeleteParameters
        {
            get
            {
                return _databaseCommandTypeForDeleteParameters;
            }
            set
            {
                _databaseCommandTypeForDeleteParameters = value;
                HandlePropertyChanged(nameof(DatabaseCommandTypeForDeleteParameters));
            }
        }

        public ClassFramework.Domain.Domains.Visibility EntityMapperVisibility
        {
            get
            {
                return _entityMapperVisibility;
            }
            set
            {
                _entityMapperVisibility = value;
                HandlePropertyChanged(nameof(EntityMapperVisibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string EntityMapperNamespace
        {
            get
            {
                return _entityMapperNamespace;
            }
            set
            {
                _entityMapperNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(EntityMapperNamespace));
            }
        }

        public ClassFramework.Domain.Domains.Visibility EntityRetrieverVisibility
        {
            get
            {
                return _entityRetrieverVisibility;
            }
            set
            {
                _entityRetrieverVisibility = value;
                HandlePropertyChanged(nameof(EntityRetrieverVisibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string EntityRetrieverNamespace
        {
            get
            {
                return _entityRetrieverNamespace;
            }
            set
            {
                _entityRetrieverNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(EntityRetrieverNamespace));
            }
        }

        public ClassFramework.Domain.Domains.Visibility IdentityCommandProviderVisibility
        {
            get
            {
                return _identityCommandProviderVisibility;
            }
            set
            {
                _identityCommandProviderVisibility = value;
                HandlePropertyChanged(nameof(IdentityCommandProviderVisibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string IdentityCommandProviderNamespace
        {
            get
            {
                return _identityCommandProviderNamespace;
            }
            set
            {
                _identityCommandProviderNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(IdentityCommandProviderNamespace));
            }
        }

        public ClassFramework.Domain.Domains.Visibility PagedEntityRetrieverSettingsVisibility
        {
            get
            {
                return _pagedEntityRetrieverSettingsVisibility;
            }
            set
            {
                _pagedEntityRetrieverSettingsVisibility = value;
                HandlePropertyChanged(nameof(PagedEntityRetrieverSettingsVisibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string PagedEntityRetrieverSettingsNamespace
        {
            get
            {
                return _pagedEntityRetrieverSettingsNamespace;
            }
            set
            {
                _pagedEntityRetrieverSettingsNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(PagedEntityRetrieverSettingsNamespace));
            }
        }

        public ClassFramework.Domain.Domains.Visibility QueryVisibility
        {
            get
            {
                return _queryVisibility;
            }
            set
            {
                _queryVisibility = value;
                HandlePropertyChanged(nameof(QueryVisibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string QueryNamespace
        {
            get
            {
                return _queryNamespace;
            }
            set
            {
                _queryNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(QueryNamespace));
            }
        }

        public System.Nullable<int> QueryMaxLimit
        {
            get
            {
                return _queryMaxLimit;
            }
            set
            {
                _queryMaxLimit = value;
                HandlePropertyChanged(nameof(QueryMaxLimit));
            }
        }

        public bool CreateQueryAsRecord
        {
            get
            {
                return _createQueryAsRecord;
            }
            set
            {
                _createQueryAsRecord = value;
                HandlePropertyChanged(nameof(CreateQueryAsRecord));
            }
        }

        public ClassFramework.Domain.Domains.Visibility QueryFieldInfoVisibility
        {
            get
            {
                return _queryFieldInfoVisibility;
            }
            set
            {
                _queryFieldInfoVisibility = value;
                HandlePropertyChanged(nameof(QueryFieldInfoVisibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string QueryFieldInfoNamespace
        {
            get
            {
                return _queryFieldInfoNamespace;
            }
            set
            {
                _queryFieldInfoNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(QueryFieldInfoNamespace));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.FieldBuilder> QueryFieldInfoFields
        {
            get
            {
                return _queryFieldInfoFields;
            }
            set
            {
                _queryFieldInfoFields = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(QueryFieldInfoFields));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.ParameterBuilder> QueryFieldInfoConstructorParameters
        {
            get
            {
                return _queryFieldInfoConstructorParameters;
            }
            set
            {
                _queryFieldInfoConstructorParameters = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(QueryFieldInfoConstructorParameters));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> QueryFieldInfoConstructorCodeStatements
        {
            get
            {
                return _queryFieldInfoConstructorCodeStatements;
            }
            set
            {
                _queryFieldInfoConstructorCodeStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(QueryFieldInfoConstructorCodeStatements));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> QueryFieldInfoGetAllFieldsCodeStatements
        {
            get
            {
                return _queryFieldInfoGetAllFieldsCodeStatements;
            }
            set
            {
                _queryFieldInfoGetAllFieldsCodeStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(QueryFieldInfoGetAllFieldsCodeStatements));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> QueryFieldInfoGetDatabaseFieldNameCodeStatements
        {
            get
            {
                return _queryFieldInfoGetDatabaseFieldNameCodeStatements;
            }
            set
            {
                _queryFieldInfoGetDatabaseFieldNameCodeStatements = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(QueryFieldInfoGetDatabaseFieldNameCodeStatements));
            }
        }

        public ClassFramework.Domain.Domains.Visibility RepositoryVisibility
        {
            get
            {
                return _repositoryVisibility;
            }
            set
            {
                _repositoryVisibility = value;
                HandlePropertyChanged(nameof(RepositoryVisibility));
            }
        }

        public ClassFramework.Domain.Domains.Visibility RepositoryInterfaceVisibility
        {
            get
            {
                return _repositoryInterfaceVisibility;
            }
            set
            {
                _repositoryInterfaceVisibility = value;
                HandlePropertyChanged(nameof(RepositoryInterfaceVisibility));
            }
        }

        public bool UseRepositoryInterface
        {
            get
            {
                return _useRepositoryInterface;
            }
            set
            {
                _useRepositoryInterface = value;
                HandlePropertyChanged(nameof(UseRepositoryInterface));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string RepositoryNamespace
        {
            get
            {
                return _repositoryNamespace;
            }
            set
            {
                _repositoryNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(RepositoryNamespace));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string RepositoryInterfaceNamespace
        {
            get
            {
                return _repositoryInterfaceNamespace;
            }
            set
            {
                _repositoryInterfaceNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(RepositoryInterfaceNamespace));
            }
        }

        public ClassFramework.Domain.Domains.Visibility DependencyInjectionVisibility
        {
            get
            {
                return _dependencyInjectionVisibility;
            }
            set
            {
                _dependencyInjectionVisibility = value;
                HandlePropertyChanged(nameof(DependencyInjectionVisibility));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings = true)]
        public string DependencyInjectionNamespace
        {
            get
            {
                return _dependencyInjectionNamespace;
            }
            set
            {
                _dependencyInjectionNamespace = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(DependencyInjectionNamespace));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [System.ComponentModel.DefaultValueAttribute(@"AddRepositories")]
        public string DependencyInjectionMethodName
        {
            get
            {
                return _dependencyInjectionMethodName;
            }
            set
            {
                _dependencyInjectionMethodName = value ?? throw new System.ArgumentNullException(nameof(value));
                HandlePropertyChanged(nameof(DependencyInjectionMethodName));
            }
        }

        public PipelineSettingsBuilder(DataFramework.Pipelines.PipelineSettings source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _commandEntityProviderAddResultEntityStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _commandEntityProviderAddAfterReadStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _commandEntityProviderUpdateResultEntityStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _commandEntityProviderUpdateAfterReadStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _commandEntityProviderDeleteResultEntityStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _commandEntityProviderDeleteAfterReadStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _addStoredProcedureStatements = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder>();
            _updateStoredProcedureStatements = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder>();
            _deleteStoredProcedureStatements = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder>();
            _queryFieldInfoFields = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.FieldBuilder>();
            _queryFieldInfoConstructorParameters = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.ParameterBuilder>();
            _queryFieldInfoConstructorCodeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _queryFieldInfoGetAllFieldsCodeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _queryFieldInfoGetDatabaseFieldNameCodeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _enableNullableContext = source.EnableNullableContext;
            _concurrencyCheckBehavior = source.ConcurrencyCheckBehavior;
            _entityClassType = source.EntityClassType;
            _defaultEntityNamespace = source.DefaultEntityNamespace;
            _defaultIdentityNamespace = source.DefaultIdentityNamespace;
            _defaultBuilderNamespace = source.DefaultBuilderNamespace;
            _addComponentModelAttributes = source.AddComponentModelAttributes;
            _commandEntityProviderVisibility = source.CommandEntityProviderVisibility;
            _commandEntityProviderNamespace = source.CommandEntityProviderNamespace;
            _commandProviderEnableAdd = source.CommandProviderEnableAdd;
            _commandProviderEnableUpdate = source.CommandProviderEnableUpdate;
            _commandProviderEnableDelete = source.CommandProviderEnableDelete;
            if (source.CommandEntityProviderAddResultEntityStatements is not null) foreach (var item in source.CommandEntityProviderAddResultEntityStatements.Select(x => x.ToBuilder())) _commandEntityProviderAddResultEntityStatements.Add(item);
            if (source.CommandEntityProviderAddAfterReadStatements is not null) foreach (var item in source.CommandEntityProviderAddAfterReadStatements.Select(x => x.ToBuilder())) _commandEntityProviderAddAfterReadStatements.Add(item);
            if (source.CommandEntityProviderUpdateResultEntityStatements is not null) foreach (var item in source.CommandEntityProviderUpdateResultEntityStatements.Select(x => x.ToBuilder())) _commandEntityProviderUpdateResultEntityStatements.Add(item);
            if (source.CommandEntityProviderUpdateAfterReadStatements is not null) foreach (var item in source.CommandEntityProviderUpdateAfterReadStatements.Select(x => x.ToBuilder())) _commandEntityProviderUpdateAfterReadStatements.Add(item);
            if (source.CommandEntityProviderDeleteResultEntityStatements is not null) foreach (var item in source.CommandEntityProviderDeleteResultEntityStatements.Select(x => x.ToBuilder())) _commandEntityProviderDeleteResultEntityStatements.Add(item);
            if (source.CommandEntityProviderDeleteAfterReadStatements is not null) foreach (var item in source.CommandEntityProviderDeleteAfterReadStatements.Select(x => x.ToBuilder())) _commandEntityProviderDeleteAfterReadStatements.Add(item);
            _commandProviderVisibility = source.CommandProviderVisibility;
            _commandProviderNamespace = source.CommandProviderNamespace;
            _useAddStoredProcedure = source.UseAddStoredProcedure;
            _useUpdateStoredProcedure = source.UseUpdateStoredProcedure;
            _useDeleteStoredProcedure = source.UseDeleteStoredProcedure;
            _databaseEntityRetrieverProviderVisibility = source.DatabaseEntityRetrieverProviderVisibility;
            _databaseEntityRetrieverProviderNamespace = source.DatabaseEntityRetrieverProviderNamespace;
            _addStoredProcedureName = source.AddStoredProcedureName;
            _updateStoredProcedureName = source.UpdateStoredProcedureName;
            _deleteStoredProcedureName = source.DeleteStoredProcedureName;
            if (source.AddStoredProcedureStatements is not null) foreach (var item in source.AddStoredProcedureStatements.Select(x => x.ToBuilder())) _addStoredProcedureStatements.Add(item);
            if (source.UpdateStoredProcedureStatements is not null) foreach (var item in source.UpdateStoredProcedureStatements.Select(x => x.ToBuilder())) _updateStoredProcedureStatements.Add(item);
            if (source.DeleteStoredProcedureStatements is not null) foreach (var item in source.DeleteStoredProcedureStatements.Select(x => x.ToBuilder())) _deleteStoredProcedureStatements.Add(item);
            _databaseCommandTypeForInsertText = source.DatabaseCommandTypeForInsertText;
            _databaseCommandTypeForInsertParameters = source.DatabaseCommandTypeForInsertParameters;
            _databaseCommandTypeForUpdateText = source.DatabaseCommandTypeForUpdateText;
            _databaseCommandTypeForUpdateParameters = source.DatabaseCommandTypeForUpdateParameters;
            _databaseCommandTypeForDeleteText = source.DatabaseCommandTypeForDeleteText;
            _databaseCommandTypeForDeleteParameters = source.DatabaseCommandTypeForDeleteParameters;
            _entityMapperVisibility = source.EntityMapperVisibility;
            _entityMapperNamespace = source.EntityMapperNamespace;
            _entityRetrieverVisibility = source.EntityRetrieverVisibility;
            _entityRetrieverNamespace = source.EntityRetrieverNamespace;
            _identityCommandProviderVisibility = source.IdentityCommandProviderVisibility;
            _identityCommandProviderNamespace = source.IdentityCommandProviderNamespace;
            _pagedEntityRetrieverSettingsVisibility = source.PagedEntityRetrieverSettingsVisibility;
            _pagedEntityRetrieverSettingsNamespace = source.PagedEntityRetrieverSettingsNamespace;
            _queryVisibility = source.QueryVisibility;
            _queryNamespace = source.QueryNamespace;
            _queryMaxLimit = source.QueryMaxLimit;
            _createQueryAsRecord = source.CreateQueryAsRecord;
            _queryFieldInfoVisibility = source.QueryFieldInfoVisibility;
            _queryFieldInfoNamespace = source.QueryFieldInfoNamespace;
            if (source.QueryFieldInfoFields is not null) foreach (var item in source.QueryFieldInfoFields.Select(x => x.ToBuilder())) _queryFieldInfoFields.Add(item);
            if (source.QueryFieldInfoConstructorParameters is not null) foreach (var item in source.QueryFieldInfoConstructorParameters.Select(x => x.ToBuilder())) _queryFieldInfoConstructorParameters.Add(item);
            if (source.QueryFieldInfoConstructorCodeStatements is not null) foreach (var item in source.QueryFieldInfoConstructorCodeStatements.Select(x => x.ToBuilder())) _queryFieldInfoConstructorCodeStatements.Add(item);
            if (source.QueryFieldInfoGetAllFieldsCodeStatements is not null) foreach (var item in source.QueryFieldInfoGetAllFieldsCodeStatements.Select(x => x.ToBuilder())) _queryFieldInfoGetAllFieldsCodeStatements.Add(item);
            if (source.QueryFieldInfoGetDatabaseFieldNameCodeStatements is not null) foreach (var item in source.QueryFieldInfoGetDatabaseFieldNameCodeStatements.Select(x => x.ToBuilder())) _queryFieldInfoGetDatabaseFieldNameCodeStatements.Add(item);
            _repositoryVisibility = source.RepositoryVisibility;
            _repositoryInterfaceVisibility = source.RepositoryInterfaceVisibility;
            _useRepositoryInterface = source.UseRepositoryInterface;
            _repositoryNamespace = source.RepositoryNamespace;
            _repositoryInterfaceNamespace = source.RepositoryInterfaceNamespace;
            _dependencyInjectionVisibility = source.DependencyInjectionVisibility;
            _dependencyInjectionNamespace = source.DependencyInjectionNamespace;
            _dependencyInjectionMethodName = source.DependencyInjectionMethodName;
        }

        public PipelineSettingsBuilder()
        {
            _commandEntityProviderAddResultEntityStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _commandEntityProviderAddAfterReadStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _commandEntityProviderUpdateResultEntityStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _commandEntityProviderUpdateAfterReadStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _commandEntityProviderDeleteResultEntityStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _commandEntityProviderDeleteAfterReadStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _addStoredProcedureStatements = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder>();
            _updateStoredProcedureStatements = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder>();
            _deleteStoredProcedureStatements = new System.Collections.ObjectModel.ObservableCollection<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder>();
            _queryFieldInfoFields = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.FieldBuilder>();
            _queryFieldInfoConstructorParameters = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.ParameterBuilder>();
            _queryFieldInfoConstructorCodeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _queryFieldInfoGetAllFieldsCodeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _queryFieldInfoGetDatabaseFieldNameCodeStatements = new System.Collections.ObjectModel.ObservableCollection<ClassFramework.Domain.Builders.CodeStatementBaseBuilder>();
            _defaultEntityNamespace = string.Empty;
            _defaultIdentityNamespace = string.Empty;
            _defaultBuilderNamespace = string.Empty;
            _addComponentModelAttributes = true;
            _commandEntityProviderNamespace = string.Empty;
            _commandProviderEnableAdd = true;
            _commandProviderEnableUpdate = true;
            _commandProviderEnableDelete = true;
            _commandProviderNamespace = string.Empty;
            _databaseEntityRetrieverProviderNamespace = string.Empty;
            _addStoredProcedureName = string.Empty;
            _updateStoredProcedureName = string.Empty;
            _deleteStoredProcedureName = string.Empty;
            _databaseCommandTypeForInsertText = CrossCutting.Data.Abstractions.DatabaseOperation.Insert;
            _databaseCommandTypeForInsertParameters = CrossCutting.Data.Abstractions.DatabaseOperation.Insert;
            _databaseCommandTypeForUpdateText = CrossCutting.Data.Abstractions.DatabaseOperation.Update;
            _databaseCommandTypeForUpdateParameters = CrossCutting.Data.Abstractions.DatabaseOperation.Update;
            _databaseCommandTypeForDeleteText = CrossCutting.Data.Abstractions.DatabaseOperation.Delete;
            _databaseCommandTypeForDeleteParameters = CrossCutting.Data.Abstractions.DatabaseOperation.Delete;
            _entityMapperNamespace = string.Empty;
            _entityRetrieverNamespace = string.Empty;
            _identityCommandProviderNamespace = string.Empty;
            _pagedEntityRetrieverSettingsNamespace = string.Empty;
            _queryNamespace = string.Empty;
            _queryFieldInfoNamespace = string.Empty;
            _repositoryNamespace = string.Empty;
            _repositoryInterfaceNamespace = string.Empty;
            _dependencyInjectionNamespace = string.Empty;
            _dependencyInjectionMethodName = @"AddRepositories"!;
            SetDefaultValues();
        }

        public DataFramework.Pipelines.PipelineSettings Build()
        {
            return new DataFramework.Pipelines.PipelineSettings(EnableNullableContext, ConcurrencyCheckBehavior, EntityClassType, DefaultEntityNamespace, DefaultIdentityNamespace, DefaultBuilderNamespace, AddComponentModelAttributes, CommandEntityProviderVisibility, CommandEntityProviderNamespace, CommandProviderEnableAdd, CommandProviderEnableUpdate, CommandProviderEnableDelete, CommandEntityProviderAddResultEntityStatements.Select(x => x.Build()!).ToList().AsReadOnly(), CommandEntityProviderAddAfterReadStatements.Select(x => x.Build()!).ToList().AsReadOnly(), CommandEntityProviderUpdateResultEntityStatements.Select(x => x.Build()!).ToList().AsReadOnly(), CommandEntityProviderUpdateAfterReadStatements.Select(x => x.Build()!).ToList().AsReadOnly(), CommandEntityProviderDeleteResultEntityStatements.Select(x => x.Build()!).ToList().AsReadOnly(), CommandEntityProviderDeleteAfterReadStatements.Select(x => x.Build()!).ToList().AsReadOnly(), CommandProviderVisibility, CommandProviderNamespace, UseAddStoredProcedure, UseUpdateStoredProcedure, UseDeleteStoredProcedure, DatabaseEntityRetrieverProviderVisibility, DatabaseEntityRetrieverProviderNamespace, AddStoredProcedureName, UpdateStoredProcedureName, DeleteStoredProcedureName, AddStoredProcedureStatements.Select(x => x.Build()!).ToList().AsReadOnly(), UpdateStoredProcedureStatements.Select(x => x.Build()!).ToList().AsReadOnly(), DeleteStoredProcedureStatements.Select(x => x.Build()!).ToList().AsReadOnly(), DatabaseCommandTypeForInsertText, DatabaseCommandTypeForInsertParameters, DatabaseCommandTypeForUpdateText, DatabaseCommandTypeForUpdateParameters, DatabaseCommandTypeForDeleteText, DatabaseCommandTypeForDeleteParameters, EntityMapperVisibility, EntityMapperNamespace, EntityRetrieverVisibility, EntityRetrieverNamespace, IdentityCommandProviderVisibility, IdentityCommandProviderNamespace, PagedEntityRetrieverSettingsVisibility, PagedEntityRetrieverSettingsNamespace, QueryVisibility, QueryNamespace, QueryMaxLimit, CreateQueryAsRecord, QueryFieldInfoVisibility, QueryFieldInfoNamespace, QueryFieldInfoFields.Select(x => x.Build()!).ToList().AsReadOnly(), QueryFieldInfoConstructorParameters.Select(x => x.Build()!).ToList().AsReadOnly(), QueryFieldInfoConstructorCodeStatements.Select(x => x.Build()!).ToList().AsReadOnly(), QueryFieldInfoGetAllFieldsCodeStatements.Select(x => x.Build()!).ToList().AsReadOnly(), QueryFieldInfoGetDatabaseFieldNameCodeStatements.Select(x => x.Build()!).ToList().AsReadOnly(), RepositoryVisibility, RepositoryInterfaceVisibility, UseRepositoryInterface, RepositoryNamespace, RepositoryInterfaceNamespace, DependencyInjectionVisibility, DependencyInjectionNamespace, DependencyInjectionMethodName);
        }

        partial void SetDefaultValues();

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddCommandEntityProviderAddResultEntityStatements(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> commandEntityProviderAddResultEntityStatements)
        {
            if (commandEntityProviderAddResultEntityStatements is null) throw new System.ArgumentNullException(nameof(commandEntityProviderAddResultEntityStatements));
            return AddCommandEntityProviderAddResultEntityStatements(commandEntityProviderAddResultEntityStatements.ToArray());
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddCommandEntityProviderAddResultEntityStatements(params ClassFramework.Domain.Builders.CodeStatementBaseBuilder[] commandEntityProviderAddResultEntityStatements)
        {
            if (commandEntityProviderAddResultEntityStatements is null) throw new System.ArgumentNullException(nameof(commandEntityProviderAddResultEntityStatements));
            foreach (var item in commandEntityProviderAddResultEntityStatements) CommandEntityProviderAddResultEntityStatements.Add(item);
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddCommandEntityProviderAddAfterReadStatements(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> commandEntityProviderAddAfterReadStatements)
        {
            if (commandEntityProviderAddAfterReadStatements is null) throw new System.ArgumentNullException(nameof(commandEntityProviderAddAfterReadStatements));
            return AddCommandEntityProviderAddAfterReadStatements(commandEntityProviderAddAfterReadStatements.ToArray());
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddCommandEntityProviderAddAfterReadStatements(params ClassFramework.Domain.Builders.CodeStatementBaseBuilder[] commandEntityProviderAddAfterReadStatements)
        {
            if (commandEntityProviderAddAfterReadStatements is null) throw new System.ArgumentNullException(nameof(commandEntityProviderAddAfterReadStatements));
            foreach (var item in commandEntityProviderAddAfterReadStatements) CommandEntityProviderAddAfterReadStatements.Add(item);
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddCommandEntityProviderUpdateResultEntityStatements(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> commandEntityProviderUpdateResultEntityStatements)
        {
            if (commandEntityProviderUpdateResultEntityStatements is null) throw new System.ArgumentNullException(nameof(commandEntityProviderUpdateResultEntityStatements));
            return AddCommandEntityProviderUpdateResultEntityStatements(commandEntityProviderUpdateResultEntityStatements.ToArray());
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddCommandEntityProviderUpdateResultEntityStatements(params ClassFramework.Domain.Builders.CodeStatementBaseBuilder[] commandEntityProviderUpdateResultEntityStatements)
        {
            if (commandEntityProviderUpdateResultEntityStatements is null) throw new System.ArgumentNullException(nameof(commandEntityProviderUpdateResultEntityStatements));
            foreach (var item in commandEntityProviderUpdateResultEntityStatements) CommandEntityProviderUpdateResultEntityStatements.Add(item);
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddCommandEntityProviderUpdateAfterReadStatements(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> commandEntityProviderUpdateAfterReadStatements)
        {
            if (commandEntityProviderUpdateAfterReadStatements is null) throw new System.ArgumentNullException(nameof(commandEntityProviderUpdateAfterReadStatements));
            return AddCommandEntityProviderUpdateAfterReadStatements(commandEntityProviderUpdateAfterReadStatements.ToArray());
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddCommandEntityProviderUpdateAfterReadStatements(params ClassFramework.Domain.Builders.CodeStatementBaseBuilder[] commandEntityProviderUpdateAfterReadStatements)
        {
            if (commandEntityProviderUpdateAfterReadStatements is null) throw new System.ArgumentNullException(nameof(commandEntityProviderUpdateAfterReadStatements));
            foreach (var item in commandEntityProviderUpdateAfterReadStatements) CommandEntityProviderUpdateAfterReadStatements.Add(item);
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddCommandEntityProviderDeleteResultEntityStatements(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> commandEntityProviderDeleteResultEntityStatements)
        {
            if (commandEntityProviderDeleteResultEntityStatements is null) throw new System.ArgumentNullException(nameof(commandEntityProviderDeleteResultEntityStatements));
            return AddCommandEntityProviderDeleteResultEntityStatements(commandEntityProviderDeleteResultEntityStatements.ToArray());
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddCommandEntityProviderDeleteResultEntityStatements(params ClassFramework.Domain.Builders.CodeStatementBaseBuilder[] commandEntityProviderDeleteResultEntityStatements)
        {
            if (commandEntityProviderDeleteResultEntityStatements is null) throw new System.ArgumentNullException(nameof(commandEntityProviderDeleteResultEntityStatements));
            foreach (var item in commandEntityProviderDeleteResultEntityStatements) CommandEntityProviderDeleteResultEntityStatements.Add(item);
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddCommandEntityProviderDeleteAfterReadStatements(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> commandEntityProviderDeleteAfterReadStatements)
        {
            if (commandEntityProviderDeleteAfterReadStatements is null) throw new System.ArgumentNullException(nameof(commandEntityProviderDeleteAfterReadStatements));
            return AddCommandEntityProviderDeleteAfterReadStatements(commandEntityProviderDeleteAfterReadStatements.ToArray());
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddCommandEntityProviderDeleteAfterReadStatements(params ClassFramework.Domain.Builders.CodeStatementBaseBuilder[] commandEntityProviderDeleteAfterReadStatements)
        {
            if (commandEntityProviderDeleteAfterReadStatements is null) throw new System.ArgumentNullException(nameof(commandEntityProviderDeleteAfterReadStatements));
            foreach (var item in commandEntityProviderDeleteAfterReadStatements) CommandEntityProviderDeleteAfterReadStatements.Add(item);
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddAddStoredProcedureStatements(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder> addStoredProcedureStatements)
        {
            if (addStoredProcedureStatements is null) throw new System.ArgumentNullException(nameof(addStoredProcedureStatements));
            return AddAddStoredProcedureStatements(addStoredProcedureStatements.ToArray());
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddAddStoredProcedureStatements(params DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder[] addStoredProcedureStatements)
        {
            if (addStoredProcedureStatements is null) throw new System.ArgumentNullException(nameof(addStoredProcedureStatements));
            foreach (var item in addStoredProcedureStatements) AddStoredProcedureStatements.Add(item);
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddUpdateStoredProcedureStatements(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder> updateStoredProcedureStatements)
        {
            if (updateStoredProcedureStatements is null) throw new System.ArgumentNullException(nameof(updateStoredProcedureStatements));
            return AddUpdateStoredProcedureStatements(updateStoredProcedureStatements.ToArray());
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddUpdateStoredProcedureStatements(params DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder[] updateStoredProcedureStatements)
        {
            if (updateStoredProcedureStatements is null) throw new System.ArgumentNullException(nameof(updateStoredProcedureStatements));
            foreach (var item in updateStoredProcedureStatements) UpdateStoredProcedureStatements.Add(item);
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddDeleteStoredProcedureStatements(System.Collections.Generic.IEnumerable<DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder> deleteStoredProcedureStatements)
        {
            if (deleteStoredProcedureStatements is null) throw new System.ArgumentNullException(nameof(deleteStoredProcedureStatements));
            return AddDeleteStoredProcedureStatements(deleteStoredProcedureStatements.ToArray());
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddDeleteStoredProcedureStatements(params DatabaseFramework.Domain.Builders.SqlStatementBaseBuilder[] deleteStoredProcedureStatements)
        {
            if (deleteStoredProcedureStatements is null) throw new System.ArgumentNullException(nameof(deleteStoredProcedureStatements));
            foreach (var item in deleteStoredProcedureStatements) DeleteStoredProcedureStatements.Add(item);
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddQueryFieldInfoFields(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.FieldBuilder> queryFieldInfoFields)
        {
            if (queryFieldInfoFields is null) throw new System.ArgumentNullException(nameof(queryFieldInfoFields));
            return AddQueryFieldInfoFields(queryFieldInfoFields.ToArray());
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddQueryFieldInfoFields(params ClassFramework.Domain.Builders.FieldBuilder[] queryFieldInfoFields)
        {
            if (queryFieldInfoFields is null) throw new System.ArgumentNullException(nameof(queryFieldInfoFields));
            foreach (var item in queryFieldInfoFields) QueryFieldInfoFields.Add(item);
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddQueryFieldInfoConstructorParameters(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.ParameterBuilder> queryFieldInfoConstructorParameters)
        {
            if (queryFieldInfoConstructorParameters is null) throw new System.ArgumentNullException(nameof(queryFieldInfoConstructorParameters));
            return AddQueryFieldInfoConstructorParameters(queryFieldInfoConstructorParameters.ToArray());
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddQueryFieldInfoConstructorParameters(params ClassFramework.Domain.Builders.ParameterBuilder[] queryFieldInfoConstructorParameters)
        {
            if (queryFieldInfoConstructorParameters is null) throw new System.ArgumentNullException(nameof(queryFieldInfoConstructorParameters));
            foreach (var item in queryFieldInfoConstructorParameters) QueryFieldInfoConstructorParameters.Add(item);
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddQueryFieldInfoConstructorCodeStatements(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> queryFieldInfoConstructorCodeStatements)
        {
            if (queryFieldInfoConstructorCodeStatements is null) throw new System.ArgumentNullException(nameof(queryFieldInfoConstructorCodeStatements));
            return AddQueryFieldInfoConstructorCodeStatements(queryFieldInfoConstructorCodeStatements.ToArray());
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddQueryFieldInfoConstructorCodeStatements(params ClassFramework.Domain.Builders.CodeStatementBaseBuilder[] queryFieldInfoConstructorCodeStatements)
        {
            if (queryFieldInfoConstructorCodeStatements is null) throw new System.ArgumentNullException(nameof(queryFieldInfoConstructorCodeStatements));
            foreach (var item in queryFieldInfoConstructorCodeStatements) QueryFieldInfoConstructorCodeStatements.Add(item);
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddQueryFieldInfoGetAllFieldsCodeStatements(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> queryFieldInfoGetAllFieldsCodeStatements)
        {
            if (queryFieldInfoGetAllFieldsCodeStatements is null) throw new System.ArgumentNullException(nameof(queryFieldInfoGetAllFieldsCodeStatements));
            return AddQueryFieldInfoGetAllFieldsCodeStatements(queryFieldInfoGetAllFieldsCodeStatements.ToArray());
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddQueryFieldInfoGetAllFieldsCodeStatements(params ClassFramework.Domain.Builders.CodeStatementBaseBuilder[] queryFieldInfoGetAllFieldsCodeStatements)
        {
            if (queryFieldInfoGetAllFieldsCodeStatements is null) throw new System.ArgumentNullException(nameof(queryFieldInfoGetAllFieldsCodeStatements));
            foreach (var item in queryFieldInfoGetAllFieldsCodeStatements) QueryFieldInfoGetAllFieldsCodeStatements.Add(item);
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddQueryFieldInfoGetDatabaseFieldNameCodeStatements(System.Collections.Generic.IEnumerable<ClassFramework.Domain.Builders.CodeStatementBaseBuilder> queryFieldInfoGetDatabaseFieldNameCodeStatements)
        {
            if (queryFieldInfoGetDatabaseFieldNameCodeStatements is null) throw new System.ArgumentNullException(nameof(queryFieldInfoGetDatabaseFieldNameCodeStatements));
            return AddQueryFieldInfoGetDatabaseFieldNameCodeStatements(queryFieldInfoGetDatabaseFieldNameCodeStatements.ToArray());
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder AddQueryFieldInfoGetDatabaseFieldNameCodeStatements(params ClassFramework.Domain.Builders.CodeStatementBaseBuilder[] queryFieldInfoGetDatabaseFieldNameCodeStatements)
        {
            if (queryFieldInfoGetDatabaseFieldNameCodeStatements is null) throw new System.ArgumentNullException(nameof(queryFieldInfoGetDatabaseFieldNameCodeStatements));
            foreach (var item in queryFieldInfoGetDatabaseFieldNameCodeStatements) QueryFieldInfoGetDatabaseFieldNameCodeStatements.Add(item);
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithEnableNullableContext(bool enableNullableContext = true)
        {
            EnableNullableContext = enableNullableContext;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithConcurrencyCheckBehavior(DataFramework.Pipelines.Domains.ConcurrencyCheckBehavior concurrencyCheckBehavior)
        {
            ConcurrencyCheckBehavior = concurrencyCheckBehavior;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithEntityClassType(DataFramework.Pipelines.Domains.EntityClassType entityClassType)
        {
            EntityClassType = entityClassType;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithDefaultEntityNamespace(string defaultEntityNamespace)
        {
            if (defaultEntityNamespace is null) throw new System.ArgumentNullException(nameof(defaultEntityNamespace));
            DefaultEntityNamespace = defaultEntityNamespace;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithDefaultIdentityNamespace(string defaultIdentityNamespace)
        {
            if (defaultIdentityNamespace is null) throw new System.ArgumentNullException(nameof(defaultIdentityNamespace));
            DefaultIdentityNamespace = defaultIdentityNamespace;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithDefaultBuilderNamespace(string defaultBuilderNamespace)
        {
            if (defaultBuilderNamespace is null) throw new System.ArgumentNullException(nameof(defaultBuilderNamespace));
            DefaultBuilderNamespace = defaultBuilderNamespace;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithAddComponentModelAttributes(bool addComponentModelAttributes = true)
        {
            AddComponentModelAttributes = addComponentModelAttributes;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithCommandEntityProviderVisibility(ClassFramework.Domain.Domains.Visibility commandEntityProviderVisibility)
        {
            CommandEntityProviderVisibility = commandEntityProviderVisibility;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithCommandEntityProviderNamespace(string commandEntityProviderNamespace)
        {
            if (commandEntityProviderNamespace is null) throw new System.ArgumentNullException(nameof(commandEntityProviderNamespace));
            CommandEntityProviderNamespace = commandEntityProviderNamespace;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithCommandProviderEnableAdd(bool commandProviderEnableAdd = true)
        {
            CommandProviderEnableAdd = commandProviderEnableAdd;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithCommandProviderEnableUpdate(bool commandProviderEnableUpdate = true)
        {
            CommandProviderEnableUpdate = commandProviderEnableUpdate;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithCommandProviderEnableDelete(bool commandProviderEnableDelete = true)
        {
            CommandProviderEnableDelete = commandProviderEnableDelete;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithCommandProviderVisibility(ClassFramework.Domain.Domains.Visibility commandProviderVisibility)
        {
            CommandProviderVisibility = commandProviderVisibility;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithCommandProviderNamespace(string commandProviderNamespace)
        {
            if (commandProviderNamespace is null) throw new System.ArgumentNullException(nameof(commandProviderNamespace));
            CommandProviderNamespace = commandProviderNamespace;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithUseAddStoredProcedure(bool useAddStoredProcedure = true)
        {
            UseAddStoredProcedure = useAddStoredProcedure;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithUseUpdateStoredProcedure(bool useUpdateStoredProcedure = true)
        {
            UseUpdateStoredProcedure = useUpdateStoredProcedure;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithUseDeleteStoredProcedure(bool useDeleteStoredProcedure = true)
        {
            UseDeleteStoredProcedure = useDeleteStoredProcedure;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithDatabaseEntityRetrieverProviderVisibility(ClassFramework.Domain.Domains.Visibility databaseEntityRetrieverProviderVisibility)
        {
            DatabaseEntityRetrieverProviderVisibility = databaseEntityRetrieverProviderVisibility;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithDatabaseEntityRetrieverProviderNamespace(string databaseEntityRetrieverProviderNamespace)
        {
            if (databaseEntityRetrieverProviderNamespace is null) throw new System.ArgumentNullException(nameof(databaseEntityRetrieverProviderNamespace));
            DatabaseEntityRetrieverProviderNamespace = databaseEntityRetrieverProviderNamespace;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithAddStoredProcedureName(string addStoredProcedureName)
        {
            if (addStoredProcedureName is null) throw new System.ArgumentNullException(nameof(addStoredProcedureName));
            AddStoredProcedureName = addStoredProcedureName;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithUpdateStoredProcedureName(string updateStoredProcedureName)
        {
            if (updateStoredProcedureName is null) throw new System.ArgumentNullException(nameof(updateStoredProcedureName));
            UpdateStoredProcedureName = updateStoredProcedureName;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithDeleteStoredProcedureName(string deleteStoredProcedureName)
        {
            if (deleteStoredProcedureName is null) throw new System.ArgumentNullException(nameof(deleteStoredProcedureName));
            DeleteStoredProcedureName = deleteStoredProcedureName;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithDatabaseCommandTypeForInsertText(CrossCutting.Data.Abstractions.DatabaseOperation databaseCommandTypeForInsertText)
        {
            DatabaseCommandTypeForInsertText = databaseCommandTypeForInsertText;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithDatabaseCommandTypeForInsertParameters(CrossCutting.Data.Abstractions.DatabaseOperation databaseCommandTypeForInsertParameters)
        {
            DatabaseCommandTypeForInsertParameters = databaseCommandTypeForInsertParameters;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithDatabaseCommandTypeForUpdateText(CrossCutting.Data.Abstractions.DatabaseOperation databaseCommandTypeForUpdateText)
        {
            DatabaseCommandTypeForUpdateText = databaseCommandTypeForUpdateText;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithDatabaseCommandTypeForUpdateParameters(CrossCutting.Data.Abstractions.DatabaseOperation databaseCommandTypeForUpdateParameters)
        {
            DatabaseCommandTypeForUpdateParameters = databaseCommandTypeForUpdateParameters;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithDatabaseCommandTypeForDeleteText(CrossCutting.Data.Abstractions.DatabaseOperation databaseCommandTypeForDeleteText)
        {
            DatabaseCommandTypeForDeleteText = databaseCommandTypeForDeleteText;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithDatabaseCommandTypeForDeleteParameters(CrossCutting.Data.Abstractions.DatabaseOperation databaseCommandTypeForDeleteParameters)
        {
            DatabaseCommandTypeForDeleteParameters = databaseCommandTypeForDeleteParameters;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithEntityMapperVisibility(ClassFramework.Domain.Domains.Visibility entityMapperVisibility)
        {
            EntityMapperVisibility = entityMapperVisibility;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithEntityMapperNamespace(string entityMapperNamespace)
        {
            if (entityMapperNamespace is null) throw new System.ArgumentNullException(nameof(entityMapperNamespace));
            EntityMapperNamespace = entityMapperNamespace;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithEntityRetrieverVisibility(ClassFramework.Domain.Domains.Visibility entityRetrieverVisibility)
        {
            EntityRetrieverVisibility = entityRetrieverVisibility;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithEntityRetrieverNamespace(string entityRetrieverNamespace)
        {
            if (entityRetrieverNamespace is null) throw new System.ArgumentNullException(nameof(entityRetrieverNamespace));
            EntityRetrieverNamespace = entityRetrieverNamespace;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithIdentityCommandProviderVisibility(ClassFramework.Domain.Domains.Visibility identityCommandProviderVisibility)
        {
            IdentityCommandProviderVisibility = identityCommandProviderVisibility;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithIdentityCommandProviderNamespace(string identityCommandProviderNamespace)
        {
            if (identityCommandProviderNamespace is null) throw new System.ArgumentNullException(nameof(identityCommandProviderNamespace));
            IdentityCommandProviderNamespace = identityCommandProviderNamespace;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithPagedEntityRetrieverSettingsVisibility(ClassFramework.Domain.Domains.Visibility pagedEntityRetrieverSettingsVisibility)
        {
            PagedEntityRetrieverSettingsVisibility = pagedEntityRetrieverSettingsVisibility;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithPagedEntityRetrieverSettingsNamespace(string pagedEntityRetrieverSettingsNamespace)
        {
            if (pagedEntityRetrieverSettingsNamespace is null) throw new System.ArgumentNullException(nameof(pagedEntityRetrieverSettingsNamespace));
            PagedEntityRetrieverSettingsNamespace = pagedEntityRetrieverSettingsNamespace;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithQueryVisibility(ClassFramework.Domain.Domains.Visibility queryVisibility)
        {
            QueryVisibility = queryVisibility;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithQueryNamespace(string queryNamespace)
        {
            if (queryNamespace is null) throw new System.ArgumentNullException(nameof(queryNamespace));
            QueryNamespace = queryNamespace;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithQueryMaxLimit(System.Nullable<int> queryMaxLimit)
        {
            QueryMaxLimit = queryMaxLimit;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithCreateQueryAsRecord(bool createQueryAsRecord = true)
        {
            CreateQueryAsRecord = createQueryAsRecord;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithQueryFieldInfoVisibility(ClassFramework.Domain.Domains.Visibility queryFieldInfoVisibility)
        {
            QueryFieldInfoVisibility = queryFieldInfoVisibility;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithQueryFieldInfoNamespace(string queryFieldInfoNamespace)
        {
            if (queryFieldInfoNamespace is null) throw new System.ArgumentNullException(nameof(queryFieldInfoNamespace));
            QueryFieldInfoNamespace = queryFieldInfoNamespace;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithRepositoryVisibility(ClassFramework.Domain.Domains.Visibility repositoryVisibility)
        {
            RepositoryVisibility = repositoryVisibility;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithRepositoryInterfaceVisibility(ClassFramework.Domain.Domains.Visibility repositoryInterfaceVisibility)
        {
            RepositoryInterfaceVisibility = repositoryInterfaceVisibility;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithUseRepositoryInterface(bool useRepositoryInterface = true)
        {
            UseRepositoryInterface = useRepositoryInterface;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithRepositoryNamespace(string repositoryNamespace)
        {
            if (repositoryNamespace is null) throw new System.ArgumentNullException(nameof(repositoryNamespace));
            RepositoryNamespace = repositoryNamespace;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithRepositoryInterfaceNamespace(string repositoryInterfaceNamespace)
        {
            if (repositoryInterfaceNamespace is null) throw new System.ArgumentNullException(nameof(repositoryInterfaceNamespace));
            RepositoryInterfaceNamespace = repositoryInterfaceNamespace;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithDependencyInjectionVisibility(ClassFramework.Domain.Domains.Visibility dependencyInjectionVisibility)
        {
            DependencyInjectionVisibility = dependencyInjectionVisibility;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithDependencyInjectionNamespace(string dependencyInjectionNamespace)
        {
            if (dependencyInjectionNamespace is null) throw new System.ArgumentNullException(nameof(dependencyInjectionNamespace));
            DependencyInjectionNamespace = dependencyInjectionNamespace;
            return this;
        }

        public DataFramework.Pipelines.Builders.PipelineSettingsBuilder WithDependencyInjectionMethodName(string dependencyInjectionMethodName)
        {
            if (dependencyInjectionMethodName is null) throw new System.ArgumentNullException(nameof(dependencyInjectionMethodName));
            DependencyInjectionMethodName = dependencyInjectionMethodName;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
