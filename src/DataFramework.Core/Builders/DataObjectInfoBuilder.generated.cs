// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 6.0.3
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DataFramework.Core.Builders
{
#nullable enable
    public partial class DataObjectInfoBuilder
    {
        public System.Collections.Generic.List<DataFramework.Core.Builders.FieldInfoBuilder> Fields
        {
            get;
            set;
        }

        public string? AssemblyName
        {
            get
            {
                return _assemblyNameDelegate.Value;
            }
            set
            {
                _assemblyNameDelegate = new (() => value);
            }
        }

        public string? TypeName
        {
            get
            {
                return _typeNameDelegate.Value;
            }
            set
            {
                _typeNameDelegate = new (() => value);
            }
        }

        public string Name
        {
            get
            {
                return _nameDelegate.Value;
            }
            set
            {
                _nameDelegate = new (() => value);
            }
        }

        public string? Description
        {
            get
            {
                return _descriptionDelegate.Value;
            }
            set
            {
                _descriptionDelegate = new (() => value);
            }
        }

        public string? DisplayName
        {
            get
            {
                return _displayNameDelegate.Value;
            }
            set
            {
                _displayNameDelegate = new (() => value);
            }
        }

        public bool IsVisible
        {
            get
            {
                return _isVisibleDelegate.Value;
            }
            set
            {
                _isVisibleDelegate = new (() => value);
            }
        }

        public bool IsReadOnly
        {
            get
            {
                return _isReadOnlyDelegate.Value;
            }
            set
            {
                _isReadOnlyDelegate = new (() => value);
            }
        }

        public bool IsQueryable
        {
            get
            {
                return _isQueryableDelegate.Value;
            }
            set
            {
                _isQueryableDelegate = new (() => value);
            }
        }

        public System.Collections.Generic.List<DataFramework.Core.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public DataObjectInfoBuilder AddFields(params DataFramework.Core.Builders.FieldInfoBuilder[] fields)
        {
            Fields.AddRange(fields);
            return this;
        }

        public DataObjectInfoBuilder AddFields(System.Collections.Generic.IEnumerable<DataFramework.Core.Builders.FieldInfoBuilder> fields)
        {
            return AddFields(fields.ToArray());
        }

        public DataObjectInfoBuilder AddMetadata(params DataFramework.Core.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public DataObjectInfoBuilder AddMetadata(System.Collections.Generic.IEnumerable<DataFramework.Core.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public DataObjectInfoBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new DataFramework.Core.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public DataFramework.Abstractions.IDataObjectInfo Build()
        {
            return new DataFramework.Core.DataObjectInfo(Fields.Select(x => x.Build()), AssemblyName, TypeName, Name, Description, DisplayName, IsVisible, IsReadOnly, IsQueryable, Metadata.Select(x => x.Build()));
        }

        public DataObjectInfoBuilder WithAssemblyName(System.Func<string>? assemblyNameDelegate)
        {
            _assemblyNameDelegate = new (assemblyNameDelegate);
            return this;
        }

        public DataObjectInfoBuilder WithAssemblyName(string? assemblyName)
        {
            AssemblyName = assemblyName;
            return this;
        }

        public DataObjectInfoBuilder WithDescription(System.Func<string>? descriptionDelegate)
        {
            _descriptionDelegate = new (descriptionDelegate);
            return this;
        }

        public DataObjectInfoBuilder WithDescription(string? description)
        {
            Description = description;
            return this;
        }

        public DataObjectInfoBuilder WithDisplayName(System.Func<string>? displayNameDelegate)
        {
            _displayNameDelegate = new (displayNameDelegate);
            return this;
        }

        public DataObjectInfoBuilder WithDisplayName(string? displayName)
        {
            DisplayName = displayName;
            return this;
        }

        public DataObjectInfoBuilder WithIsQueryable(bool isQueryable = true)
        {
            IsQueryable = isQueryable;
            return this;
        }

        public DataObjectInfoBuilder WithIsQueryable(System.Func<bool> isQueryableDelegate)
        {
            _isQueryableDelegate = new (isQueryableDelegate);
            return this;
        }

        public DataObjectInfoBuilder WithIsReadOnly(bool isReadOnly = true)
        {
            IsReadOnly = isReadOnly;
            return this;
        }

        public DataObjectInfoBuilder WithIsReadOnly(System.Func<bool> isReadOnlyDelegate)
        {
            _isReadOnlyDelegate = new (isReadOnlyDelegate);
            return this;
        }

        public DataObjectInfoBuilder WithIsVisible(bool isVisible = true)
        {
            IsVisible = isVisible;
            return this;
        }

        public DataObjectInfoBuilder WithIsVisible(System.Func<bool> isVisibleDelegate)
        {
            _isVisibleDelegate = new (isVisibleDelegate);
            return this;
        }

        public DataObjectInfoBuilder WithName(System.Func<string> nameDelegate)
        {
            _nameDelegate = new (nameDelegate);
            return this;
        }

        public DataObjectInfoBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public DataObjectInfoBuilder WithType(System.Type? type)
        {
            TypeName = type?.AssemblyQualifiedName;
            return this;
        }

        public DataObjectInfoBuilder WithTypeName(System.Func<string>? typeNameDelegate)
        {
            _typeNameDelegate = new (typeNameDelegate);
            return this;
        }

        public DataObjectInfoBuilder WithTypeName(string? typeName)
        {
            TypeName = typeName;
            return this;
        }

        public DataObjectInfoBuilder()
        {
            Fields = new System.Collections.Generic.List<DataFramework.Core.Builders.FieldInfoBuilder>();
            Metadata = new System.Collections.Generic.List<DataFramework.Core.Builders.MetadataBuilder>();
            _assemblyNameDelegate = new (() => default);
            _typeNameDelegate = new (() => default);
            _nameDelegate = new (() => string.Empty);
            _descriptionDelegate = new (() => default);
            _displayNameDelegate = new (() => default);
            _isVisibleDelegate = new (() => true);
            _isReadOnlyDelegate = new (() => default);
            _isQueryableDelegate = new (() => true);
        }

        public DataObjectInfoBuilder(DataFramework.Abstractions.IDataObjectInfo source)
        {
            Fields = new System.Collections.Generic.List<DataFramework.Core.Builders.FieldInfoBuilder>();
            Metadata = new System.Collections.Generic.List<DataFramework.Core.Builders.MetadataBuilder>();
            Fields.AddRange(source.Fields.Select(x => new DataFramework.Core.Builders.FieldInfoBuilder(x)));
            _assemblyNameDelegate = new (() => source.AssemblyName);
            _typeNameDelegate = new (() => source.TypeName);
            _nameDelegate = new (() => source.Name);
            _descriptionDelegate = new (() => source.Description);
            _displayNameDelegate = new (() => source.DisplayName);
            _isVisibleDelegate = new (() => source.IsVisible);
            _isReadOnlyDelegate = new (() => source.IsReadOnly);
            _isQueryableDelegate = new (() => source.IsQueryable);
            Metadata.AddRange(source.Metadata.Select(x => new DataFramework.Core.Builders.MetadataBuilder(x)));
        }

        private System.Lazy<string?> _assemblyNameDelegate;

        private System.Lazy<string?> _typeNameDelegate;

        private System.Lazy<string> _nameDelegate;

        private System.Lazy<string?> _descriptionDelegate;

        private System.Lazy<string?> _displayNameDelegate;

        private System.Lazy<bool> _isVisibleDelegate;

        private System.Lazy<bool> _isReadOnlyDelegate;

        private System.Lazy<bool> _isQueryableDelegate;
    }
#nullable restore
}

