// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 6.0.2
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DataFramework.Core.Builders
{
#nullable enable
    public partial class FieldInfoBuilder
    {
        public string Name
        {
            get;
            set;
        }

        public string? Description
        {
            get;
            set;
        }

        public string? DisplayName
        {
            get;
            set;
        }

        public string? TypeName
        {
            get;
            set;
        }

        public bool IsNullable
        {
            get;
            set;
        }

        public bool IsVisible
        {
            get;
            set;
        }

        public bool IsReadOnly
        {
            get;
            set;
        }

        public bool IsIdentityField
        {
            get;
            set;
        }

        public bool IsComputed
        {
            get;
            set;
        }

        public bool IsPersistable
        {
            get;
            set;
        }

        public bool CanGet
        {
            get;
            set;
        }

        public bool CanSet
        {
            get;
            set;
        }

        public bool UseForConcurrencyCheck
        {
            get;
            set;
        }

        public object? DefaultValue
        {
            get;
            set;
        }

        public System.Collections.Generic.List<DataFramework.Core.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public DataFramework.Abstractions.IFieldInfo Build()
        {
            return new DataFramework.Core.FieldInfo(Name, Description, DisplayName, TypeName, IsNullable, IsVisible, IsReadOnly, IsIdentityField, IsComputed, IsPersistable, CanGet, CanSet, UseForConcurrencyCheck, DefaultValue, Metadata.Select(x => x.Build()));
        }

        public FieldInfoBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public FieldInfoBuilder WithDescription(string? description)
        {
            Description = description;
            return this;
        }

        public FieldInfoBuilder WithDisplayName(string? displayName)
        {
            DisplayName = displayName;
            return this;
        }

        public FieldInfoBuilder WithTypeName(string? typeName)
        {
            TypeName = typeName;
            return this;
        }

        public FieldInfoBuilder WithType(System.Type? type)
        {
            TypeName = type?.AssemblyQualifiedName;
            return this;
        }

        public FieldInfoBuilder WithIsNullable(bool isNullable = true)
        {
            IsNullable = isNullable;
            return this;
        }

        public FieldInfoBuilder WithIsVisible(bool isVisible = true)
        {
            IsVisible = isVisible;
            return this;
        }

        public FieldInfoBuilder WithIsReadOnly(bool isReadOnly = true)
        {
            IsReadOnly = isReadOnly;
            return this;
        }

        public FieldInfoBuilder WithIsIdentityField(bool isIdentityField = true)
        {
            IsIdentityField = isIdentityField;
            return this;
        }

        public FieldInfoBuilder WithIsComputed(bool isComputed = true)
        {
            IsComputed = isComputed;
            return this;
        }

        public FieldInfoBuilder WithIsPersistable(bool isPersistable = true)
        {
            IsPersistable = isPersistable;
            return this;
        }

        public FieldInfoBuilder WithCanGet(bool canGet = true)
        {
            CanGet = canGet;
            return this;
        }

        public FieldInfoBuilder WithCanSet(bool canSet = true)
        {
            CanSet = canSet;
            return this;
        }

        public FieldInfoBuilder WithUseForConcurrencyCheck(bool useForConcurrencyCheck = true)
        {
            UseForConcurrencyCheck = useForConcurrencyCheck;
            return this;
        }

        public FieldInfoBuilder WithDefaultValue(object? defaultValue)
        {
            DefaultValue = defaultValue;
            return this;
        }

        public FieldInfoBuilder AddMetadata(System.Collections.Generic.IEnumerable<DataFramework.Core.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public FieldInfoBuilder AddMetadata(params DataFramework.Core.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public FieldInfoBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new DataFramework.Core.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public FieldInfoBuilder()
        {
            Metadata = new System.Collections.Generic.List<DataFramework.Core.Builders.MetadataBuilder>();
            Name = string.Empty;
            IsNullable = default;
            IsVisible = true;
            IsReadOnly = default;
            IsIdentityField = default;
            IsComputed = default;
            IsPersistable = true;
            CanGet = true;
            CanSet = true;
            UseForConcurrencyCheck = default;
        }

        public FieldInfoBuilder(DataFramework.Abstractions.IFieldInfo source)
        {
            Metadata = new System.Collections.Generic.List<DataFramework.Core.Builders.MetadataBuilder>();
            Name = source.Name;
            Description = source.Description;
            DisplayName = source.DisplayName;
            TypeName = source.TypeName;
            IsNullable = source.IsNullable;
            IsVisible = source.IsVisible;
            IsReadOnly = source.IsReadOnly;
            IsIdentityField = source.IsIdentityField;
            IsComputed = source.IsComputed;
            IsPersistable = source.IsPersistable;
            CanGet = source.CanGet;
            CanSet = source.CanSet;
            UseForConcurrencyCheck = source.UseForConcurrencyCheck;
            DefaultValue = source.DefaultValue;
            Metadata.AddRange(source.Metadata.Select(x => new DataFramework.Core.Builders.MetadataBuilder(x)));
        }
    }
#nullable restore
}

