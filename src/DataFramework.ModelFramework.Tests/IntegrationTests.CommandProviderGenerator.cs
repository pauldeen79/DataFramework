using System.Diagnostics.CodeAnalysis;
using CrossCutting.Common.Extensions;
using DataFramework.Core.Builders;
using DataFramework.ModelFramework.Extensions;
using FluentAssertions;
using ModelFramework.Objects.Builders;
using ModelFramework.Objects.CodeStatements.Builders;
using ModelFramework.Objects.Contracts;
using Xunit;

namespace DataFramework.ModelFramework.Tests
{
    public partial class IntegrationTests
    {
        [Fact]
        public void Can_Generate_CommandProvider()
        {
            // Arrange
            var settings = GeneratorSettings.Default;
            var input = CreateDataObjectInfo(default(EntityClassType)).ToCommandProviderClass(settings);

            // Act
            var actual = GenerateCode(input, settings);

            // Assert
            actual.NormalizeLineEndings().Should().Be(@"// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DatabaseCommandProviders
{
#nullable enable
    [System.CodeDom.Compiler.GeneratedCode(@""DataFramework.ModelFramework.Generators.CommandProviderGenerator"", @""1.0.0.0"")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal partial class TestEntityCommandProvider : CrossCutting.Data.Abstractions.IDatabaseCommandProvider<EntityIdentities.TestEntityIdentity>
    {
        public CrossCutting.Data.Abstractions.IDatabaseCommand Create(Entities.TestEntity source, CrossCutting.Data.Abstractions.DatabaseOperation operation)
        {
            switch (operation)
            {
                case CrossCutting.Data.Abstractions.DatabaseOperation.Insert:
                    return new CrossCutting.Data.Core.Commands.StoredProcedureCommand<Entities.TestEntity>(""[InsertTestEntity]"", source, CrossCutting.Data.Abstractions.DatabaseOperation.Insert, AddParameters);
                case CrossCutting.Data.Abstractions.DatabaseOperation.Update:
                    return new CrossCutting.Data.Core.Commands.StoredProcedureCommand<Entities.TestEntity>(""[UpdateTestEntity]"", source, CrossCutting.Data.Abstractions.DatabaseOperation.Update, UpdateParameters);
                case CrossCutting.Data.Abstractions.DatabaseOperation.Delete:
                    return new CrossCutting.Data.Core.Commands.StoredProcedureCommand<Entities.TestEntity>(""[DeleteTestEntity]"", source, CrossCutting.Data.Abstractions.DatabaseOperation.Delete, DeleteParameters);
                default:
                    throw new ArgumentOutOfRangeException(""operation"", string.Format(""Unsupported operation: {0}"", operation));
            }
        }

        public object AddParameters(Entities.TestEntity resultEntity)
        {
            return new[]
            {
                new KeyValuePair<string, object?>(""@Name"", resultEntity.Name),
                new KeyValuePair<string, object?>(""@Description"", resultEntity.Description),
            };
        }

        public object UpdateParameters(Entities.TestEntity resultEntity)
        {
            return new[]
            {
                new KeyValuePair<string, object?>(""@Name"", resultEntity.Name),
                new KeyValuePair<string, object?>(""@Description"", resultEntity.Description),
                new KeyValuePair<string, object?>(""@IdOriginal"", resultEntity.IdOriginal),
                new KeyValuePair<string, object?>(""@NameOriginal"", resultEntity.NameOriginal),
                new KeyValuePair<string, object?>(""@DescriptionOriginal"", resultEntity.DescriptionOriginal),
            };
        }

        public object DeleteParameters(Entities.TestEntity resultEntity)
        {
            return new[]
            {
                new KeyValuePair<string, object?>(""@IdOriginal"", resultEntity.IdOriginal),
                new KeyValuePair<string, object?>(""@NameOriginal"", resultEntity.NameOriginal),
                new KeyValuePair<string, object?>(""@DescriptionOriginal"", resultEntity.DescriptionOriginal),
            };
        }
    }
#nullable restore
}
");
        }

        [Fact]
        public void Can_Generate_CommandProvider_Without_Stored_Procedures()
        {
            // Arrange
            var settings = GeneratorSettings.Default;
            var input = new DataObjectInfoBuilder()
                .WithName("TestEntity")
                .WithConcurrencyCheckBehavior(ConcurrencyCheckBehavior.AllFields)
                .AddFields
                (
                    new FieldInfoBuilder().WithName("Id").WithType(typeof(int)).WithIsIdentityField().WithIsRequired().WithPropertyType(typeof(long)),
                    new FieldInfoBuilder().WithName("Name").WithType(typeof(string)).WithStringLength(30).WithIsRequired(),
                    new FieldInfoBuilder().WithName("Description").WithType(typeof(string)).WithStringLength(255).WithIsNullable(),
                    new FieldInfoBuilder().WithName("IsExistingEntity").WithType(typeof(bool)).WithIsComputed().WithIsPersistable(false).AddComputedFieldStatements(new LiteralCodeStatementBuilder().WithStatement("return Id > 0;"))
                )
                .WithCommandProviderNamespace("DatabaseCommandProviders")
                .WithCommandProviderVisibility(Visibility.Internal)
                .AddCommandProviderAttributes(new AttributeBuilder().WithName(typeof(ExcludeFromCodeCoverageAttribute).FullName))
                .Build()
                .ToCommandProviderClass(settings);

            // Act
            var actual = GenerateCode(input, settings);

            // Assert
            actual.NormalizeLineEndings().Should().Be(@"// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DatabaseCommandProviders
{
#nullable enable
    [System.CodeDom.Compiler.GeneratedCode(@""DataFramework.ModelFramework.Generators.CommandProviderGenerator"", @""1.0.0.0"")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal partial class TestEntityCommandProvider : CrossCutting.Data.Abstractions.IDatabaseCommandProvider<TestEntityIdentity>
    {
        public CrossCutting.Data.Abstractions.IDatabaseCommand Create(TestEntity source, CrossCutting.Data.Abstractions.DatabaseOperation operation)
        {
            switch (operation)
            {
                case CrossCutting.Data.Abstractions.DatabaseOperation.Insert:
                    return new CrossCutting.Data.Core.Commands.TextCommand<TestEntity>(""INSERT INTO [TestEntity]([Name], [Description]) OUTPUT INSERTED.[Id], INSERTED.[Name], INSERTED.[Description] VALUES(@Name, @Description)"", source, CrossCutting.Data.Abstractions.DatabaseOperation.Insert, AddParameters);
                case CrossCutting.Data.Abstractions.DatabaseOperation.Update:
                    return new CrossCutting.Data.Core.Commands.TextCommand<TestEntity>(""UPDATE [TestEntity] SET [Name] = @Name, [Description] = @Description OUTPUT INSERTED.[Id], INSERTED.[Name], INSERTED.[Description] WHERE [Id] = @IdOriginal AND [Name] = @NameOriginal AND [Description] = @DescriptionOriginal"", source, CrossCutting.Data.Abstractions.DatabaseOperation.Update, UpdateParameters);
                case CrossCutting.Data.Abstractions.DatabaseOperation.Delete:
                    return new CrossCutting.Data.Core.Commands.TextCommand<TestEntity>(""DELETE FROM [TestEntity] OUTPUT DELETED.[Id], DELETED.[Name], DELETED.[Description] WHERE [Id] = @IdOriginal AND [Name] = @NameOriginal AND [Description] = @DescriptionOriginal"", source, CrossCutting.Data.Abstractions.DatabaseOperation.Delete, DeleteParameters);
                default:
                    throw new ArgumentOutOfRangeException(""operation"", string.Format(""Unsupported operation: {0}"", operation));
            }
        }

        public object AddParameters(TestEntity resultEntity)
        {
            return new[]
            {
                new KeyValuePair<string, object?>(""@Name"", resultEntity.Name),
                new KeyValuePair<string, object?>(""@Description"", resultEntity.Description),
            };
        }

        public object UpdateParameters(TestEntity resultEntity)
        {
            return new[]
            {
                new KeyValuePair<string, object?>(""@Name"", resultEntity.Name),
                new KeyValuePair<string, object?>(""@Description"", resultEntity.Description),
                new KeyValuePair<string, object?>(""@IdOriginal"", resultEntity.IdOriginal),
                new KeyValuePair<string, object?>(""@NameOriginal"", resultEntity.NameOriginal),
                new KeyValuePair<string, object?>(""@DescriptionOriginal"", resultEntity.DescriptionOriginal),
            };
        }

        public object DeleteParameters(TestEntity resultEntity)
        {
            return new[]
            {
                new KeyValuePair<string, object?>(""@IdOriginal"", resultEntity.IdOriginal),
                new KeyValuePair<string, object?>(""@NameOriginal"", resultEntity.NameOriginal),
                new KeyValuePair<string, object?>(""@DescriptionOriginal"", resultEntity.DescriptionOriginal),
            };
        }
    }
#nullable restore
}
");
        }

        [Fact]
        public void Can_Generate_Insert_CommandText()
        {
            // Arrange
            var input = CreateDataObjectInfo(default(EntityClassType));

            // Act
            var actual = input.CreateDatabaseInsertCommandText();

            // Assert
            actual.Should().Be(@"INSERT INTO [TestEntity]([Name], [Description]) OUTPUT INSERTED.[Id], INSERTED.[Name], INSERTED.[Description] VALUES(@Name, @Description)");
        }

        [Fact]
        public void Can_Generate_Update_CommandText()
        {
            // Arrange
            var input = CreateDataObjectInfo(default(EntityClassType));

            // Act
            var actual = input.CreateDatabaseUpdateCommandText();

            // Assert
            actual.Should().Be(@"UPDATE [TestEntity] SET [Name] = @Name, [Description] = @Description OUTPUT INSERTED.[Id], INSERTED.[Name], INSERTED.[Description] WHERE [Id] = @IdOriginal AND [Name] = @NameOriginal AND [Description] = @DescriptionOriginal");
        }

        [Fact]
        public void Can_Generate_Delete_CommandText()
        {
            // Arrange
            var input = CreateDataObjectInfo(default(EntityClassType));

            // Act
            var actual = input.CreateDatabaseDeleteCommandText();

            // Assert
            actual.Should().Be(@"DELETE FROM [TestEntity] OUTPUT DELETED.[Id], DELETED.[Name], DELETED.[Description] WHERE [Id] = @IdOriginal AND [Name] = @NameOriginal AND [Description] = @DescriptionOriginal");
        }
    }
}
