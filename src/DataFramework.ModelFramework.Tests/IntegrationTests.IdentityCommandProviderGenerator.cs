using CrossCutting.Common.Extensions;
using DataFramework.ModelFramework.Extensions;
using FluentAssertions;
using Xunit;

namespace DataFramework.ModelFramework.Tests
{
    public partial class IntegrationTests
    {
        [Fact]
        public void Can_Generate_IdentityCommandProvider()
        {
            // Arrange
            var settings = GeneratorSettings.Default;
            var input = CreateDataObjectInfo(default(EntityClassType)).ToIdentityCommandProviderClass(settings);

            // Act
            var actual = GenerateCode(input, settings);

            // Assert
            actual.NormalizeLineEndings().Should().Be(@"// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using CrossCutting.Data.Core.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DatabaseCommandProviders
{
#nullable enable
    [System.CodeDom.Compiler.GeneratedCode(@""DataFramework.ModelFramework.Generators.IdentityCommandProviderGenerator"", @""1.0.0.0"")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal partial class TestEntityIdentityCommandProvider : CrossCutting.Data.Abstractions.IDatabaseCommandProvider<EntityIdentities.TestEntityIdentity>
    {
        public void Create(EntityIdentities.TestEntityIdentity source, CrossCutting.Data.Abstractions.DatabaseOperation operation)
        {
            if (operation != CrossCutting.Data.Abstractions.DatabaseOperation.Select)
            {
                throw new ArgumentOutOfRangeException(""operation"", ""Only Select operation is supported"");
            }
            return new SelectCommandBuilder()
                .Select(_settings.Fields)
                .From(_settings.TableName)
                .Where(""[Id] = @Id"")
                .AppendParameters(source)
                .Build();
        }

        public TestEntityIdentityCommandProvider()
        {
            _settings = new EntityRetrieverSettings.TestEntityPagedEntityRetrieverSettings();
        }

        private readonly EntityRetrieverSettings.TestEntityPagedEntityRetrieverSettings _settings;
    }
#nullable restore
}
");
        }
    }
}
