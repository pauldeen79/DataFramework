using CrossCutting.Common.Extensions;
using DataFramework.ModelFramework.Extensions;
using FluentAssertions;
using Xunit;

namespace DataFramework.ModelFramework.Tests
{
    public partial class IntegrationTests
    {
        [Fact]
        public void Can_Generate_EntityMapper_For_Poco()
        {
            // Arrange
            var settings = GeneratorSettings.Default;
            var dataObjectInfo = CreateDataObjectInfo(EntityClassType.Poco);
            var input = dataObjectInfo.ToEntityMapperClass(settings);

            // Act
            var actual = GenerateCode(input, settings);

            // Assert
            actual.NormalizeLineEndings().Should().Be(@"// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace EntityMappers
{
#nullable enable
    [System.CodeDom.Compiler.GeneratedCode(@""DataFramework.ModelFramework.Generators.EntityMapperGenerator"", @""1.0.0.0"")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal partial class TestEntityEntityMapper : CrossCutting.Data.Abstractions.IDatabaseEntityMapper<Entities.TestEntity>
    {
        public Entities.TestEntity Map(System.Data.IDataReader reader)
        {
            return new Entities.TestEntity
            {
                Id = reader.GetInt32(""Id""),
                Name = reader.GetString(""Name""),
                Description = reader.GetNullableString(""Description""),
                IsExistingEntity = true,
            };
        }
    }
#nullable restore
}
");
        }

        [Fact]
        public void Can_Generate_EntityMapper_For_Record()
        {
            // Arrange
            var settings = GeneratorSettings.Default;
            var dataObjectInfo = CreateDataObjectInfo(EntityClassType.Record);
            var input = dataObjectInfo.ToEntityMapperClass(settings);

            // Act
            var actual = GenerateCode(input, settings);

            // Assert
            actual.NormalizeLineEndings().Should().Be(@"// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace EntityMappers
{
#nullable enable
    [System.CodeDom.Compiler.GeneratedCode(@""DataFramework.ModelFramework.Generators.EntityMapperGenerator"", @""1.0.0.0"")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    internal partial class TestEntityEntityMapper : CrossCutting.Data.Abstractions.IDatabaseEntityMapper<Entities.TestEntity>
    {
        public Entities.TestEntity Map(System.Data.IDataReader reader)
        {
            return new Entities.TestEntity
            (
                id: reader.GetInt32(""Id""),
                name: reader.GetString(""Name""),
                description: reader.GetNullableString(""Description""),
                isExistingEntity: true,
            );
        }
    }
#nullable restore
}
");
        }
    }
}
